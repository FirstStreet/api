directive @fsApplyExclusion on FIELD_DEFINITION

directive @fsHasPolicy(service: Service!) on FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @fsRecordAPIUsage(service: APIUsageService!) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @fsValidation(constraint: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

enum APIUsageService {
  LOCATION
  FLOOD
  FIRE
  HEAT
  WIND
}

# The AVM Provider provides metadata for an AVM provider.
type AVMProvider {
  # The canonical provider ID that provides the AVM
  id: Int64!

  # Provides the name of the AVM provider.
  name: String

  # A URL representation of the providers company logo.
  logo: String
}

# The bounding box GeoJSON (Polygon)
type Bbox {
  # GeoJSON geometry type Polygon.
  type: String

  # Coordinates of the Polygon.
  #
  # Example: *[[[-76.963460575,39.400443189],[-76.963460575,39.400823574],[-76.962570569,39.400823574],[-76.962570569,39.400443189],[-76.963460575,39.400443189]]]*
  coordinates: [[[Float!]]]
}

# Building characteristic for a Property
type Building {
  # Whether or not the property has a basement.
  #
  # Example: true
  hasBasement: Boolean

  # Number of units in Property
  #
  # Example: 1
  units: Int64

  # Number of stories for the Property
  #
  # Example: 2
  stories: Int64

  # Construction characteristics
  construction: BuildingConstruction

  # Roof characteristics
  roof: BuildingRoof

  # Year built
  yearBuilt: Int64

  # Floor size in square feet
  sqft: Int64

  # Replacement cost per square foot
  replacementCostPerSqft: Int64

  # The direction of the largest face of the building. Format as direction (N, NE, E, SE, S, SW, W, NW)
  buildingOrientation: CompassDirection

  # The design standard to which the building is built, displayed as text (low, middle, high)
  windDesignStandard: BuildingWindDesignStandard
}

type BuildingConstruction implements BuildingMaterial {
  # Material used for exterior walls of the structure
  material: String
  combustibility: CombustibilityRating
}

interface BuildingMaterial {
  # The material for the specified building node
  material: String
  combustibility: CombustibilityRating
}

type BuildingRoof implements BuildingMaterial {
  # Material used for the roof
  material: String
  combustibility: CombustibilityRating
}

# Different areas have different building standards for wind.
enum BuildingWindDesignStandard {
  LOW
  MIDDLE
  HIGH
}

# The center GeoJSON (Point)
type Center {
  # GeoJSON geometry type Point.
  type: String

  # Coordinates of the Point
  #
  # Example: *[-76.96286,39.40059]*
  coordinates: [Float!]
}

# Place (County Subdivision in New England) as provided by the US Census Bureau.
type City implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: *5301920*
  fsid: Int64!

  # Name of the city.
  #
  # Example: *Redmond*
  name: String

  # The legal/statistical area description (LSAD) as provided by the census which describes the particular typology for each geographic entity; that is, whether the entity is a borough, city, town, or township, among others.
  #
  # Example: *57*
  LSAD: String

  # ZCTAs that are within geographical limits of the city.
  zcta: [Zcta]

  # Counties that are within geographical limits of the city.
  county: [County]

  # County subdivisions that are within geographical limits of the city.
  cousub: [CountySubdivision]

  # State that City resides in.
  state: State

  # A collection of nodes that represents geographical information for the city.
  geometry: LocationGeometry

  # List of the neighborhood(s) the city is associated with, as a connection. This encompasses macro neighborhoods, neighborhood, sub-neighborhoods and residential districts (e.g. subdivisions and apartment complexes).
  neighborhoodConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # Flood data for the city.
  flood: LocalityFlood

  # Fire details for the city.
  fire: LocalityFire

  # Heat details for the city.
  heat: LocalityHeat

  # Wind details for the city.
  wind: LocalityWind

  # fsfLink is First Street's link to the neighborhood on FirstStreet's website.
  #
  # Example: *https://floodfactor.com/city/5301920_fsid?utm_medium=overlay*
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")

  # List of properties in the city, as a connection.
  propertyConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter the properties of this city.
    filter: PropertyFilters
  ): PageConnection
}

# The combustibility rating of a building material
enum CombustibilityRating {
  LOW
  MEDIUM
  HIGH
}

enum CommunityRiskScoreScale {
  MINOR
  MODERATE
  MAJOR
  SEVERE
  EXTREME
}

enum CompassDirection {
  N
  NE
  E
  SE
  S
  SW
  W
  NW
}

# Congressional District for the 116th Congress (not available in Flood Factor)
type CongressionalDistrict implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: *3904*
  fsid: Int64!

  # The name associated with the congressional district.
  #
  # Example: *Ohio Congressional District 4*
  name: String

  # Denotes the session of congress from which the boundary was drawn.
  #
  # Example: *116*
  congress: Int64

  # The county or counties the congressional district is associated with.
  county: [County]

  # The county subdivision(s) the congressional district is associated with, as a connection.
  cousubConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # Congressional district's state.
  state: State

  # A collection of nodes that represents geographical information for the congressional district.
  geometry: LocationGeometry

  # Flood data for the congressional district.
  flood: LocalityFlood

  # Fire details for the congressional district.
  fire: LocalityFire

  # Heat details for the congressional district.
  heat: LocalityHeat

  # Wind details for the congressional district.
  wind: LocalityWind

  # fsfLink is always null for congressional districts, as they are not displayed on FirstStreet's website.
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")

  # List of properties within the congressional district, as a connection.
  propertyConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter the properties of this congressional district.
    filter: PropertyFilters
  ): PageConnection
}

# County or county-equivalents as provided by the US Census Bureau
type County implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: *1003*
  fsid: Int64!

  # The Federal Information Processing Standards code which uniquely identified counties and county equivalents, and certain freely associated states.
  #
  # Example: *1003*
  FIPS: Int64

  # Name of the county.
  #
  # Example: *Baldwin*
  name: String

  # A boolean field indicating if the county is in a coastal area.
  isCoastal: Boolean

  # The city or cities the county is associated with, as a connection.
  cityConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # The county's ZIP code tabulation area(s) (ZCTA) provided by the Census Bureau.
  zcta: [Zcta]

  # The congressional district(s) the county is associated with.
  cd: [CongressionalDistrict]

  # The county's state.
  state: State

  # A collection of nodes that represents geographical information for the county.
  geometry: LocationGeometry

  # Flood details for the county.
  flood: LocalityFlood

  # Fire details for the county.
  fire: LocalityFire

  # Heat details for the county.
  heat: LocalityHeat

  # Wind details for the county.
  wind: LocalityWind

  # fsfLink is First Street's link to the neighborhood on FirstStreet's website.
  #
  # Example: *https://floodfactor.com/county/1003_fsid?utm_medium=overlay*
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")

  # The neighborhood(s) the city is associated with, as a connection. This encompasses macro neighborhoods, neighborhood, sub-neighborhoods and residential districts (e.g. subdivisions and apartment complexes).
  neighborhoodConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # List of properties in the county, as a connection.
  propertyConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter the properties of this county.
    filter: PropertyFilters
  ): PageConnection
}

# County subdivision
type CountySubdivision implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: *5303391392*
  fsid: Int64!

  # Name of the county subdivision.
  #
  # Example: *Issaquah Plateau*
  name: String

  # The county the county subdivision belongs to.
  county: County

  # The county subdivision's state
  state: State

  # The legal/statistical area description (LSAD) as provided by the census which describes the particular typology for each geographic entity.
  #
  # Example: *22*
  LSAD: String

  # Flood details for the county subdivision.
  flood: LocalityFlood

  # Fire details for the subdivision.
  fire: LocalityFire

  # Heat details for the subdivision.
  heat: LocalityHeat

  # Wind details for the subdivision.
  wind: LocalityWind

  # A collection of nodes that represents geographical information for the county subdivision.
  geometry: LocationGeometry

  # fsfLink is First Street's link to the neighborhood on FirstStreet's website.
  #
  # Example: *https://floodfactor.com/cousub/5303391392_fsid?utm_medium=overlay*
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")
}

# Remap Graphql Types to Go Types
scalar Date

enum EmberRiskRating {
  MINOR
  MODERATE
  MAJOR
  SEVERE
  EXTREME
}

interface Excluding {
  exclusion: Exclusion
}

# Exclusion details.
type Exclusion {
  description: String
}

# The corresponding text description that describes the `factor` score that is associated with the property.
enum FactorScale {
  MINIMAL
  MINOR
  MODERATE
  MAJOR
  SEVERE
  EXTREME
}

enum FindOperator {
  EQ
  NE
  GT
  GE
  LT
  LE
}

union FindResultItem = Property | City | State | County | CongressionalDistrict | Zcta | Tract | Neighborhood | CountySubdivision

type FindResultItemConnection {
  edges: [FindResultItemEdge]
  pageInfo: PageInfo!
}

type FindResultItemEdge {
  node: FindResultItem
  cursor: String!
}

type FireHistoricConnection {
  # Returns a list type that wraps edge type.
  edges: [FireHistoricEdge!]!

  # Pagination information in relation to current page.
  pageInfo: PageInfo!

  # Total number of records for the connection.
  #
  # Example: *15382*
  totalCount: Int64
}

# Represents one record for the current page.
type FireHistoricEdge {
  # Cursor is a string that can be used in subsequent request as value of a connection "after" argument, to request page starting after this item.
  #
  # Example: *Y3Vyc29yOjEyNTI0MA==*
  cursor: String

  # Contains one page record data.
  node: FireHistoricPageResult!
}

# The information associated with the event(s) for event(s) where the area of the model simulation of the historic event overlaps any area of the location.
interface FireHistoricEvent {
  # A unique identifier to each modeled historic event from First Street
  eventId: Int64!

  # The name of the modeled historic event if it exists.
  name: String!

  # Categorization of event type (wildfire, prescribed fire, wildland fire use, unknown, out of area responses, or complex).
  type: String!

  # The year when the event occured.
  year: Int64!

  # The month when the event occured.
  month: Int64!

  # Area of the historic event's polygon in square kilometers.
  area: Int64!

  # The total count of parcels affected by the historic event.
  eventAffectedProperties: Int64!

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

# Filters to narrow the list of historic events.
input FireHistoricEventFilter {
  # Restrict event types that will be returned
  type: [FireHistoricEventType]

  # Maximum property distance from the event. Only applicable to Property events. Ignored for Locality events.
  distance: Int64
}

# Details for a single historic fire event.
type FireHistoricEventRecord implements FireHistoricEvent {
  # A unique First Street identifier assigned to each modeled historic event.
  eventId: Int64!

  # The name of the modeled historic event if it exists.
  name: String!

  # Categorization of event type (wildfire, prescribed fire, wildland fire use, unknown, out of area responses, or complex).
  type: String!

  # The year when the event occured.
  year: Int64!

  # The month when the event occured.
  month: Int64!

  # Area of the historic event's polygon in square kilometers.
  area: Int64!

  # The total count of parcels that had the building footprint within the mapped area of the historic event's geometry.
  eventAffectedProperties: Int64!

  # The total count of parcels that were closer than 32187 meters from the building footprint to the historic event's geometry.
  eventNearbyProperties: Int64!

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

enum FireHistoricEventType {
  WILDFIRE
  PRESCRIBED_FIRE
  WILDLAND_FIRE_USE
  UNKNOWN
  OUT_OF_AREA_RESPONSES
  COMPLEX
}

union FireHistoricPageResult = PropertyFireHistoric | LocalityFireHistoric

# Query to obtain fire-related data.
type FireQuery {
  # Map lookup.  Returns map metadata such as legends.
  mapLegend: MapLegend!

  # Historic event batch lookup. Can lookup up to 35 historic events.
  historicEvents(eventIds: [Int64!]!): [FireHistoricEventRecord]

  # Current Fire Model version
  version: VersionRelease!
}

interface FireStatistics {
  # The sign of future burn probability minus current burn probability (-1 is decreasing, 0 is unchanging, 1 is increasing)
  riskDirection: Int64
}

# Provides information from community-wide grey and green adaptation projects across the United States categorized into 40 different Adaptation Types.
#   Returns data as a connection.
#
#   **Features**
#
#   - Identify all large-scale adaptation projects that serve an area
#   - Understand how many properties served by a particular adaptation structure or project
#   - Recognize to what extent, an area is protected or what level of event a project can withstand
#   - Access information for large-scale adaptation projects across the country
type FloodAdaptation {
  # A unique First Street identifier assigned to each adaptation project
  #
  # Example: *23456*
  adaptationId: Int64!

  # The name of the adaptation project
  #
  # Example: *Kearsley Reservoir Dam*
  name: String

  # The type(s) categorization of the adaptation project from 40 categories inclusive of grey and green adaptation projects.
  #
  # Example: *['dam', 'levee', 'seawall']*
  type: [String!]

  # The type(s) of flooding the adaptation project protects against (pluvial, fluvial or tidal).
  #
  # Example: *['pluvial', 'tidal']*
  scenario: [String!]

  # Applicable for structures that convey certain amounts of water during pluvial and fluvial events.
  # Adaptation structures with conveyance are incorporated into the model without completely removing flooding from within the area served.
  hasConveyance: Boolean

  # The flooding event that the adaptation can withstand. For example, a 1 in 100 flood.
  returnPeriod: Int64

  # Count of locations that the adaptation project is serving, broken down by location type.
  serving: FloodAdaptationServing!

  # A collection of nodes that represents geographical information for the adaptation.
  geometry: LocationGeometry
}

# Count of locations that the adaptation project is serving as [AdaptationServing], broken down by location type.
type FloodAdaptationServing {
  # The count of properties that the adaptation project is serving.
  property: Int64!

  # The count of neighborhoods that the adaptation project is serving.
  neighborhood: Int64!

  # The count of zctas that the adaptation project is serving.
  zcta: Int64!

  # The count of tracts that the adaptation project is serving.
  tract: Int64!

  # The count of cities that the adaptation project is serving.
  city: Int64!

  # The count of counties that the adaptation project is serving.
  county: Int64!

  # The count of congressional districts that the adaptation project is serving.
  cd: Int64!

  # The count of states that the adaptation project is serving.
  state: Int64!
}

# The information associated with the event(s) for event(s) where the area of the model simulation of the historic event overlaps any area of the location.
# Available depth bins begin at 5-10cm of flooding (displayed as "5") and are provided in 5 cm increments up to 120-125cm of flooding (displayed as "120"). Everything with greater than 125cm of flooding is bulked together at 125.
interface FloodHistoricEvent {
  # A unique identifier to each modeled historic event from First Street
  eventId: Int64!

  # The name of the modeled historic event if it exists (note: several were strong pluvial events).
  name: String!

  # Categorization of event type (hurricane, fluvial, nor'easter, or tropical storm).
  type: String!

  # The year when the event occured.
  year: Int64!

  # The month when the event occured.
  month: Int64!

  # The estimated recurrence interval of the event, or the inverse of the annual likelihood. For example a 1 in 500 annual likelihood event.
  returnPeriod: Int64

  # The total count of parcels that had any flooding (>0) to the building footprint that are within the mapped area of the historic event's geometry.
  affectedProperties: Int64!

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

# Details for a single historic flooding event.
type FloodHistoricEventRecord implements FloodHistoricEvent {
  # A unique First Street identifier assigned to each modeled historic event.
  eventId: Int64!

  # The name of the modeled historic event if it exists (note: several were strong pluvial events).
  name: String!

  # Categorization of event type (hurricane, fluvial, nor'easter, or tropical storm).
  type: String!

  # The year when the event occured.
  year: Int64!

  # The month when the event occured.
  month: Int64!

  # The estimated recurrence interval of the event, or the inverse of the annual likelihood. For example a 1 in 500 annual likelihood event.
  returnPeriod: Int64

  # The total count of parcels that are within the mapped area of the historic event's geometry.
  totalProperties: Int64!

  # The total count of parcels that had any flooding (>0) to the building footprint that are within the mapped area of the historic event's geometry.
  affectedProperties: Int64!

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

enum FloodInsuranceRequirement {
  # Flood insurance is required by federally regulated or insured mortgage lenders.
  REQUIRED

  # Flood insurance is recommended but is likely not federally required.
  RECOMMENDED

  # Flood insurance requirement is unknown.
  NULL
}

# Query to obtain flood-related data.
type FloodQuery {
  # Historic event batch lookup. Can lookup up to 35 historic events.
  historicEvents(eventIds: [Int64!]!): [FloodHistoricEventRecord]

  # Tide station details batch lookup.
  tideStations(tideStationIds: [Int64!]!): [TideStation]

  # Adaptation project batch lookup. Can lookup up to 35 adaptations.
  adaptations(adaptationIds: [Int64!]!): [FloodAdaptation]

  # Map lookup.  Returns map metadata such as legends.
  mapLegend: MapLegend!

  # Current Flood Model version
  version: VersionRelease!
}

# Flood indicators.
interface FloodStatistic {
  # The location's risk direction represented in a numeric value based on the change in risk for the location from 2020 to 2050 for the climate model realization of the RCP 4.5 mid emissions scenario.
  #
  # -1 = decreasing
  # 0 = stationary
  # 1 = increasing
  riskDirection: Int64

  # Denotes what environmental risks impact the location represented in a numeric value.
  #
  # 1 = precipitation
  # 2 = precipitation and sea level rise
  # 3 = precipitation, sea level rise and hurricane storm surge
  #
  # Coastal areas on the East Coast and Hawaii will return 3, other coastal areas will return 2 and all other locations will return 1.
  environmentalRisk: Int64
}

# Query to obtain heat-related data.
type HeatQuery {
  # Map lookup.  Returns map metadata such as legends.
  mapLegend: MapLegend!

  # Current HEAT Model version
  version: VersionRelease!
}

enum InsuranceClassification {
  # Homeowners Policy Special Form 3 (Single-Family)
  HO3

  # Homeowners Policy Contents Broad Form 4 (Rental)
  HO4

  # Homeowners Policy Unit Owners Form 6 (Condos/Townhomes)
  HO6
}

type InsuranceHippoRate {
  # The URL to purchase the insurance
  link: String!

  # The policy's classification.
  # There will always only 1 of each type of policy classification.
  # (For example, HO3 will only appear on the list once, but can appear alongside HO4)
  #
  # HO3: Single family
  # HO4: Renters
  # HO6: Condos/Townhomes
  # N/A: Unavailable
  classification: InsuranceClassification!

  # The minimum price for the policy
  minPrice: Int!

  # The maximum price for the policy
  maxPrice: Int!

  # Number of providers available for the policy (Can be 0)
  providers: Int!

  # The amount the coverage is intended for in the following order
  contentsCoverage: Int
  homeCoverage: Int
  dwellingCoverage: Int
}

# Insurance provider details.
type InsuranceProvider {
  # Insurance provider name.
  name: String

  # Insurance provider logo.
  logo: String
}

type InsuranceRate {
  # The URL to purchase the insurance
  link: String!

  # The policy's classification.
  # There will always only 1 of each type of policy classification.
  # (For example, HO3 will only appear on the list once, but can appear alongside HO4)
  #
  # HO3: Single family
  # HO4: Renters
  # HO6: Condos/Townhomes
  # N/A: Unavailable
  classification: InsuranceClassification!

  # The minimum price for the policy
  minPrice: Int!

  # The maximum price for the policy
  maxPrice: Int!

  # Number of providers available for the policy (Can be 0)
  providers: Int!

  # The amount the coverage is intended for in the following order
  contentsCoverage: Int
  homeCoverage: Int
  dwellingCoverage: Int
}

scalar Int64

# Fire details for locality.
type LocalityFire implements FireStatistics & Excluding {
  # Overall direction of risk, computed by taking a weighted average of risk directions at parcels and infrastructure facilities here
  # (-1 is decreasing, 0 is unchanging, 1 is increasing)
  riskDirection: Int64

  # Risk Factor Fire Factor report link
  link: String!

  # Fire probabilty details for locality.
  probability: LocalityFireProbability

  # The locality's fire historical events, as a connection. Sorted in reverse chronological order.
  historicConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter fire historic events
    filter: FireHistoricEventFilter
  ): FireHistoricConnection

  # Data about fire risk for locality infrastructure and community facilities.
  communityRisk: LocalityFireFacilityRisk

  # If locality is excluded, the reason for exclusion.
  exclusion: Exclusion
}

type LocalityFireFacilityRisk {
  # Total number of facilities serving the locality. For road centerlines, the count is in meters.
  facilitiesCount: Int64!

  # A categorical 0-5 score for each county in each category.
  score: Int64

  # Score scale description
  scoreScale: CommunityRiskScoreScale

  # Overall direction of risk for the facility.
  #
  # (-1 is decreasing, 0 is unchanging, 1 is increasing)
  riskDirection: Int64!

  # Relative fire risk within the state.
  riskPercentile: Float

  # Facility category.
  facilitiesCategory: [LocalityFireFacilityRiskCategorySummary]
}

# Community fire risk facility category statistics.
type LocalityFireFacilityRiskCategoryStat {
  # Year used for the model.
  year: Int64!

  # Year relative to this year.
  relativeYear: Int64!

  # Count of facilities (with this category in this county in this year) that have the burn probability exceeding threshold.
  facilitiesFireRisk: Int64
}

# Facility category
type LocalityFireFacilityRiskCategorySummary {
  # Id of the category.
  #
  # Example: *10*
  facilityCategoryId: Int64!

  # Count of features (with this category in this county in this year) that have some fire risk.
  facilitiesCount: Int64!

  # Overall direction of risk for the facility category.
  # (-1 is decreasing, 0 is unchanging, 1 is increasing)
  riskDirection: Int64

  # A categorical 0-5 score for each category.
  score: Int64

  # Fire risk category statistics.
  risks: [LocalityFireFacilityRiskCategoryStat]
}

# The information associated with the event(s) for event(s) where the area of the model simulation of the historic event overlaps any area of the location.
# This includes event ID (unique First Street ID assigned to all modeled historic events), type, name and fire impact to the location.
type LocalityFireHistoric implements FireHistoricEvent {
  # An id assigned to this locality - historic event relationship.
  id: Int64!

  # A unique First Street identifier assigned to each modeled historic event.
  eventId: Int64!

  # The name of the modeled historic event if it exists.
  name: String!

  # Categorization of event type (wildfire, prescribed fire, wildland fire use, unknown, out of area responses, or complex).
  type: String!

  # The year when the event occured.
  year: Int64!

  # The month when the event occured.
  month: Int64!

  # Area of the historic event's polygon in square kilometers.
  area: Int64!

  # The count of parcels that had the building footprint within the mapped area of the historic event's geometry intersecting locality.
  affectedProperties: Int64!

  # The total count of parcels that had the building footprint within the mapped area of the historic event's geometry.
  eventNearbyProperties: Int64!

  # The total count of parcels that had the building footprint within the mapped area of the historic event's geometry.
  eventAffectedProperties: Int64!

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

# Total count of properties with fire risk broken down by year
type LocalityFireProbability {
  count: [LocalityFireProbabilityCount]
}

type LocalityFireProbabilityCount {
  count: Int64!
  year: Int64!
  relativeYear: Int64!
}

# Flood details for locality.
type LocalityFlood implements FloodStatistic & Excluding {
  # The location's risk direction represented in a numeric value based on the change in risk for the location from 2020 to 2050 for the climate model realization of the RCP 4.5 mid emissions scenario.
  #
  # -1 = decreasing
  # 0 = stationary
  # 1 = increasing
  riskDirection: Int64

  # Risk Factor link to Flood Report for the locality
  link: String!

  # Denotes what environmental risks impact the location represented in a numeric value.
  #
  # 1 = precipitation
  # 2 = precipitation and sea level rise
  # 3 = precipitation, sea level rise and hurricane storm surge
  #
  # Coastal areas on the East Coast and Hawaii will return 3, other coastal areas will return 2 and all other locations will return 1.
  environmentalRisk: Int64

  # Flood probabilty details for locality.
  probability: LocalityFloodProbability

  # Provides the number of residential properties with any loss and the average dollar value loss broken down by Flood Factor score.
  AAL: LocalityFloodAAL @deprecated(reason: "'AAL' is deprecated, use 'consequences' instead")

  # The list of modeled historic events that inundated the location.
  # Inundation is defined as having flood depth >0 for property queries or >1 property with >0 flood depth for higher-level locations.
  # Flood depth is calculated at the lowest elevation of the building footprint (largest if more than 1 exists, or property centroid where footprint does not exist).
  historic: [LocalityFloodHistoric]

  # Provides information from community-wide grey and green adaptation projects across the United States categorized into 40 different Adaptation Types.
  # Returns data as a connection.
  #
  # **Features**
  #
  # - Identify all large-scale adaptation projects that serve an area
  # - Understand how many properties served by a particular adaptation structure or project
  # - Recognize to what extent, an area is protected or what level of event a project can withstand
  # - Access information for large-scale adaptation projects across the country
  adaptationConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # Data about flood risk for locality infrastructure and community facilities.
  communityRisk: LocalityFloodFacilityRisk

  # The Social Vulnerability Index
  SoVI: LocalityFloodSovi

  # Details about flood environmental details, such as precipitation, sea level and tide stations.
  environmental: LocalityFloodEnvironmental

  # If locality is excluded, the reason for exclusion.
  exclusion: Exclusion
}

# Tthe number of residential properties with any loss and the average dollar value loss broken down by Flood Factor score.
type LocalityFloodAAL {
  # It provides an array with the count and dollar loss for properties with loss in that location along with associated year and Flood Factor score.
  # The low, mid, and high count of residential properties with value loss due to flood risk.
  annualLoss: [LocalityFloodAnnualLoss]

  # It provides an array with the count and dollar loss for properties with loss in that location along with associated year.
  # The low, mid, and high count of residential properties with value loss due to flood risk.
  annualLossByYear(
    # One or more relative year values to create annual loss for.
    # Default: *0, 30*
    relativeYear: [Int64!]
  ): [LocalityFloodAnnualLossesByYear]
}

# Details for locality flood losses.
#
# The low, mid, high are based on 3 potential climate model realizations of the RCP 4.5 emissions scenario.
#
# Losses are determined by using the USACE depth damage functions for Riverine and Surge flooding. Damage due to precipitation flooding is given by a conservative depth damage function developed by First Street Foundation.
type LocalityFloodAnnualLoss implements OverTime {
  # The year (2020, 2025, 2030, 2035, 2040, 2045, or 2050) the dollar loss was calculated for.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The total US dollar loss for all properties with the associated Flood Factor level of risk in the location based on the low scenario of the RCP 4.5 emissions curve.
  totalLossLow: Int64!

  # The total US dollar loss for all properties with the associated Flood Factor level of risk in the location based on the mid scenario of the RCP 4.5 emissions curve.
  totalLossMid: Int64!

  # The total US dollar loss for all properties with the associated Flood Factor level of risk in the location based on the high scenario of the RCP 4.5 emissions curve.
  totalLossHigh: Int64!

  # The count of properties with value loss due to flood risk in the location based on the low scenario of the RCP 4.5 emissions curve.
  countLow: Int64!

  # The count of properties with value loss due to flood risk in the location based on the mid scenario of the RCP 4.5 emissions curve.
  countMid: Int64!

  # The count of properties with value loss due to flood risk in the location based on the high scenario of the RCP 4.5 emissions curve.
  countHigh: Int64!

  # The property's Flood Factor, a numeric integer from 1-10 (where 1 = minimal and 10 = extreme) based on flooding risk to the building footprint.
  floodFactor: Int64
}

# The number of residential properties with any loss and the average dollar value loss broken down by year.
type LocalityFloodAnnualLossesByYear implements OverTime {
  # The year (2020, 2025, 2030, 2035, 2040, 2045, or 2050) the dollar loss was calculated for.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The total US dollar loss for all properties with the associated Flood Factor level of risk in the location based on the low scenario of the RCP 4.5 emissions curve.
  totalLossLow: Int64!

  # The total US dollar loss for all properties with the associated Flood Factor level of risk in the location based on the mid scenario of the RCP 4.5 emissions curve.
  totalLossMid: Int64!

  # The total US dollar loss for all properties with the associated Flood Factor level of risk in the location based on the high scenario of the RCP 4.5 emissions curve.
  totalLossHigh: Int64!

  # The count of properties with value loss due to flood risk in the location based on the low scenario of the RCP 4.5 emissions curve.
  countLow: Int64!

  # The count of properties with value loss due to flood risk in the location based on the mid scenario of the RCP 4.5 emissions curve.
  countMid: Int64!

  # The count of properties with value loss due to flood risk in the location based on the high scenario of the RCP 4.5 emissions curve.
  countHigh: Int64!
}

# Details about flood environmental details, such as precipitation, sea level and tide stations.
type LocalityFloodEnvironmental {
  # Delivers the future projections for 2020, 2035 and 2050, from the average change in extreme precipitation event intensity using historical data for the county.
  precipitation: LocalityFloodEnvironmentalPrecipitation

  # Delivers the tide station names and IDs for all tide stations associated with the state.
  seaLevel: LocalityFloodEnvironmentalSeaLevel
}

# Delivers the future projections for 2020, 2035 and 2050, from the average change in extreme precipitation event intensity using historical data for the county.
type LocalityFloodEnvironmentalPrecipitation {
  # The projections for 2020, 2035, and 2050 with the low, mid and high countywide average change (using historical precipitation data from 1980-2010 (centered on 1995)) in extreme precipitation event intensity based on 3 potential climate model realizations of the RCP 4.5 emissions scenario.
  projected: [LocalityFloodEnvironmentalPrecipitationProjected]
}

# The projections for 2020, 2035, and 2050 with the low, mid and high countywide average change (using historical precipitation data from 1980-2010 (centered on 1995)) in extreme precipitation event intensity based on 3 potential climate model realizations of the RCP 4.5 emissions scenario.
type LocalityFloodEnvironmentalPrecipitationProjected implements OverTime {
  # The year (2020, 2030, 2040, or 2050) of the projection.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The projected level of modeled flooding for the location for the associated year based on the low scenario of the RCP 4.5 emissions curve.
  low: Float

  # The projected level of modeled flooding for the location for the associated year based on the mid scenario of the RCP 4.5 emissions curve.
  mid: Float

  # The projected level of modeled flooding for the location for the associated year based on the high scenario of the RCP 4.5 emissions curve.
  high: Float
}

# Delivers the tide station names and IDs for all tide stations associated with the state.
type LocalityFloodEnvironmentalSeaLevel {
  # A TideStation provides metadata as well as the annual observed mean sea level rise (1980-2020), and sea level rise projection by 10 year increments (2020-2050).
  tideStation: [TideStation]
}

# Details about community facility categories.
type LocalityFloodFacilityCategory {
  # CategoryId as assigned by FirstStreet.
  facilityCategoryId: Int64!

  # Facility category name.
  name: String

  # Facility category description.
  description: String
}

# Details about community facility/infrastructure.
type LocalityFloodFacilityMetadata {
  # Community facility category.
  category: [LocalityFloodFacilityCategory]

  # Community facility type.
  type: [LocalityFloodFacilityType]
}

# Flood risk for locality infrastructure and community facilities.
type LocalityFloodFacilityRisk {
  # Total number of facilities serving the locality. For road centerlines, the count is in meters.
  facilitiesCount: Int64!

  # A categorical 0-5 score for each county in each category.
  score: Int64

  # Score scale description
  scoreScale: CommunityRiskScoreScale

  # The location's risk direction represented in a numeric value based on the change in risk for the location from 2020 to 2050 for the climate model realization of the RCP 4.5 mid emissions scenario.
  #
  # -1 = decreasing
  # 0 = stationary
  # 1 = increasing
  riskDirection: Int64!

  # Relative flood risk within the state.
  riskPercentile: Float

  # Facility category.
  facilitiesCategory: [LocalityFloodFacilityRiskCategorySummary]
}

# Community flood risk facility category statistics.
type LocalityFloodFacilityRiskCategoryStat {
  # Year used for the model.
  year: Int64!

  # Year relative to 2020.
  relativeYear: Int64!

  # Count of facilities (with this category in this county in this year) that have some flood risk. For road centerlines, the count is in meters.
  facilitiesOperationalRisk: Int64

  # Count of facilities (with this category in this county in this year) that have an expected depth that exceeds the threshold. For road centerlines, the count is in meters
  facilitiesWaterRisk: Int64
}

# Facility category
type LocalityFloodFacilityRiskCategorySummary {
  # Id of the category.
  #
  # Example: *10*
  facilityCategoryId: Int64!

  # Count of features (with this category in this county in this year) that have some flood risk. For road centerlines, the count is in meters.
  facilitiesCount: Int64!

  # The location's risk direction represented in a numeric value based on the change in risk for the location from 2020 to 2050 for the climate model realization of the RCP 4.5 mid emissions scenario.
  #
  # -1 = decreasing
  # 0 = stationary
  # 1 = increasing
  riskDirection: Int64

  # A categorical 0-5 score for each category.
  score: Int64

  # Flood risk category statistics.
  risks: [LocalityFloodFacilityRiskCategoryStat]
}

# Details about community facility types.
type LocalityFloodFacilityType {
  # TypeId as assigned by FirstStreet.
  facilityTypeId: Int64!

  # CategoryId as assigned by FirstStreet.
  facilityCategoryId: Int64!

  # Facility type name.
  name: String
}

# The information associated with the event(s) for event(s) where the area of the model simulation of the historic event overlaps any area of the location.
# This includes event ID (unique First Street ID assigned to all modeled historic events), type, name and flood impact to the location.
# Impact includes the total count of affected properties broken down by depth bin.
# Available depth bins begin at 5-10cm of flooding (displayed as "5") and are provided in 5 cm increments up to 120-125cm of flooding (displayed as "120"). Everything with greater than 125cm of flooding is bulked together at 125.
type LocalityFloodHistoric implements FloodHistoricEvent {
  # A unique First Street identifier assigned to each modeled historic event.
  eventId: Int64!

  # The name of the modeled historic event if it exists (note: several were strong pluvial events).
  name: String!

  # Categorization of event type (hurricane, fluvial, nor'easter, or tropical storm).
  type: String!

  # The year when the event occured.
  year: Int64!

  # The month when the event occured.
  month: Int64!

  # The estimated recurrence interval of the event, or the inverse of the annual likelihood. For example a 1 in 500 annual likelihood event.
  returnPeriod: Int64

  # The total count of parcels that had any flooding (>0) to the building footprint that are within the mapped area of the historic event's geometry.
  affectedProperties: Int64!

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry

  # Historic summary by depth.
  data: [LocalityFloodHistoricData]
}

# Historic summary by depth.
type LocalityFloodHistoricData {
  # The depth of flooding (in centimeters ) from the historic event.
  # Available depth bins begin at 5-10cm of flooding (displayed as "5") and are provided in 5 cm increments up to 120-125cm of flooding (displayed as "120").
  # Everything with greater than 125cm of flooding is bulked together at 125.
  # Flood depth is calculated at the lowest elevation of the building footprint (largest if more than 1 exists, or property centroid where footprint does not exist).
  bin: Int64!

  # The total count of affected properties for the specified depth bin for the location.
  count: Int64!
}

# Details about insurance for specific locality
type LocalityFloodInsurance {
  # Count of properties requiring insurance
  propertyInsuranceCount: Int64

  # Insurance premium based on 125000$ coverage minimum.
  premium125Min: Int64

  # Insurance premium based on 125000$ coverage maximum.
  premium125Max: Int64

  # Insurance premium based on 250000$ coverage minimum.
  premium250Min: Int64

  # Insurance premium based on 250000$ coverage maximum.
  premium250Max: Int64

  # Insurance provider details.
  provider: InsuranceProvider!

  # Insurance provider disclaimer(s).
  disclaimer: [String]

  # URL to the insurance provider's website for insurance purchase.
  purchaseLink: String!
}

# Delivers the total count of properties with flood risk within the location broken down by depth threshold, return period and year.
type LocalityFloodProbability {
  # Counts of affected properties.
  count: [LocalityFloodProbabilityCount]

  # Flood probability rate over 30 years.
  risks: LocalityFloodRisks
  countSummary(
    # One or more relative year values to create summary for.
    # Default: *0, 15, 30*
    relativeYear: [Int64!]

    # One or more return period values to create summary for.
    # Default: *5, 20, 100, 250, 500*
    returnPeriod: [Int64!]
  ): [LocalityFloodProbabilityCountSummary]
}

# Locality Specific Probablity. Returns total count of properties with flood risk within the location broken down by depth threshold, return period and year.
type LocalityFloodProbabilityCount implements OverTime {
  # The year (2020 or 2050) the probability was calculated for.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The return period (500, 100, 20, 5, or 2 years) that the depth was calculated for.
  returnPeriod: Int64!

  # The depth of flooding (in centimeters) that the probability was calculated for.
  # Available depth bins begin at 0-5cm of flooding (displayed as “0”) and are provided in 5 cm increments up to 120-125cm of flooding (displayed as “120").
  # Everything with greater than 125cm of flooding is bulked together at 125.
  # Flood depth is calculated at the lowest elevation of the building footprint (largest if more than 1 exists, or property centroid where footprint does not exist).
  threshold: Int64!

  # The total count of properties that exist in that return period and depth bin, based on the low scenario of the RCP 4.5 emissions curve.
  low: Int64

  # The total count of properties that exist in that return period and depth bin, based on the mid scenario of the RCP 4.5 emissions curve.
  mid: Int64

  # The total count of properties that exist in that return period and depth bin, based on the high scenario of the RCP 4.5 emissions curve.
  high: Int64
}

# Delivers the total count of properties with flood risk within the location broken down by year and return period.
type LocalityFloodProbabilityCountSummary implements OverTime {
  # The year (2020, 2025, 2030, 2035, 2040, 2045, or 2050) the depth was calculated for.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The return period (500, 250, 100, 50, 20, 10, 5, or 2 years) that the sum was calculated for.
  returnPeriod: Int64!

  # The depth in centimeters for the specified return period based on the low scenario of the RCP 4.5 emissions curve.
  low: Int64

  # The depth in centimeters for the specified return period based on the mid scenario of the RCP 4.5 emissions curve.
  mid: Int64

  # The depth in centimeters for the specified return period based on the hihg scenario of the RCP 4.5 emissions curve.
  high: Int64
}

# Summarizes flood probability counts for 30 years.
type LocalityFloodRisks {
  # Flood risk on national level
  national: LocalityFloodRisksData

  # Flood risk for the locality
  regional: LocalityFloodRisksData
}

type LocalityFloodRisksData {
  # Percentage of growth of the number of properties at risk of flooding over the next 30 year.
  riskCountChangePercent: Float
}

# The Social Vulnerability Index details.
type LocalityFloodSovi {
  # TODO: need definition.
  percentile: Float
}

type LocalityHeat implements Excluding {
  # The 98th percentile or "hot day" temperature in a locality
  hotTemperature: Int64

  # The locality's Community Risk Level
  riskLevel: Int64

  # Risk Factor Heat Factor report link
  link: String!

  # The percentage change in the amount of elecricity used for the purpose of maintaining a comfortable indoor temperature in 30 years.
  coolingEnergyPercentChange: Float

  # The number of hot days (98th percentile) in the future.
  hotDaysFuture: Int64

  # The change in the number of hot days (98th percentile) in the future.
  hotDaysChange: Int64

  # The percent change in the number of hot days (98th percentile) in the future.
  hotDaysPercentChange: Float

  # The number of dangerous days (above 100F) in the future.
  dangerousDaysFuture: Int64

  # The change in the number of dangerous days (above 100F) in the future.
  dangerousDaysChange: Int64

  # The percent change in the number of dangerous days (above 100F) in the future.
  dangerousDaysPercentChange: Float

  # Average High Temperature in the hottest month in Farenheight.
  temperatureAverageHigh(filter: LocalityHeatTemperatureHighFilter): [LocalityHeatTemperatureHigh]

  # Distribution of days by temperature.
  days: LocalityHeatDays

  # Heave wave details
  heatWaves: LocalityHeatWaves

  # The count of properties at risk
  atRisk(filter: LocalityHeatAtRiskFilter): [LocalityHeatAtRisk]

  # Emission values averages, available only for state level
  emissions: LocalityHeatEmission

  # If locality is excluded, the reason for exclusion.
  exclusion: Exclusion
}

type LocalityHeatAtRisk {
  level: FactorScale!
  propertyCount: Int64
}

input LocalityHeatAtRiskFilter {
  level: [FactorScale]
}

type LocalityHeatDay {
  # Year asscociated with the point.
  year: Int64!

  # Relative year to this year. Can be negative
  relativeYear: Int64!

  # Lower bound of temperature bin. The unit is either Fahrenheit or percentile depending on the parent object.
  binLower: Int64

  # Upper bound of temperature bin. The unit is either Fahrenheit or percentile depending on the parent object.
  binUpper: Int64

  # Days within bin
  days: Int64

  # The Y height in a chart.
  yMax: Float
}

input LocalityHeatDayFilter {
  # Filter distributions by relative years.  e.g. relativeYears=[0,30]
  relativeYear: [Int64!]
}

type LocalityHeatDays {
  # Distribution of days in a year by temperature in Fahrenheit.
  distribution(filter: LocalityHeatDayFilter): [LocalityHeatDay]

  # Days of temperature at or above the local definition of a hot day in percentile.
  hotDays: [LocalityHeatDay]

  # Days of temperature at or above the cooling temperature in Fahrenheit.
  coolingDays: [LocalityHeatDay]

  # Days of temperature at or above the health caution temperature in Fahrenheit.
  healthCautionDays: [LocalityHeatDay]

  # Days of temperature at or above the dangerous temperature in Fahrenheit.
  dangerousDays: [LocalityHeatDay]
}

type LocalityHeatEmission {
  # Kilograms of CO2 emitted per MWh consumed
  co2PerMWh: Int64
}

type LocalityHeatTemperatureHigh {
  # Year asscociated with the point.
  year: Int64!

  # Relative year to this year. Can be negative
  relativeYear: Int64!

  # Maximum Monthly Temperature
  # Average daily max temperature (Fahrenheit) in the hottest month (usually July)
  mmt: Float
}

# Filter to narrow the values by relative year.
input LocalityHeatTemperatureHighFilter {
  relativeYear: [Int64!]
}

type LocalityHeatWave {
  # Year asscociated with the point.
  year: Int64!

  # Relative year to this year. Can be negative.
  relativeYear: Int64!

  # Temperature threshold of the heat wave. The unit is either in Fahrenheit or percentile depending on the parent object.
  threshold: Int64!

  # The probability of 3 days in a row to exceed threshold temperature.
  probability: Float

  # For given probability, how long heat wave will last.
  length: Int64
}

# Filter to narrow the values by year, relative year, or threshold.
input LocalityHeatWaveFilter {
  relativeYear: [Int64!]
}

type LocalityHeatWaves {
  # Distribution of heat waves in a year by temperature in Fahrenheit.
  distribution(filter: LocalityHeatWaveFilter): [LocalityHeatWave]

  # Heat waves of temperature above the local definition of a hot temperature in percentile.
  hotHeatWave: [LocalityHeatWave]
}

# Provides information on the number of policies, number of claims, amount of coverage, and amount paid on claims for buildings and contents as well as the increased cost of compliance for the location.
type LocalityNFIP {
  # The total count of entries in the claims dataset for the location. The claims data is sourced from FEMA's release of anonymized claims data in March of 2019. For county and tract queries, the geography is matched to the FIPS code. For ZIP queries, the reported ZIP of the property is used.
  claimCount: Int64

  # The total count of National Flood Insurance Program (NFIP) insurance policies for the location from the Federal Emergency Management Agency (FEMA) dataset.
  policyCount: Int64

  # The total sum cost in US dollars paid on the claims related to buildings. The claims data is sourced from FEMA's release of anonymized claims data in March of 2019. For county and tract queries, the geography is matched to the FIPS code. For ZIP queries, the reported ZIP of the property is used.
  buildingPaid: Int64

  # The total sum cost in US dollars paid on the claims related to the contents of buildings. The claims data is sourced from FEMA's release of anonymized claims data in March of 2019. For county and tract queries, the geography is matched to the FIPS code. For ZIP queries, the reported ZIP of the property is used.
  contentPaid: Int64

  # The total sum in US dollars of insurance coverage on buildings through National Flood Insurance Program (NFIP) insurance policies for the location.
  buildingCoverage: Int64

  # The total sum in US dollars of insurance coverage on contents of buildings through National Flood Insurance Program (NFIP) insurance policies for the location.
  contentCoverage: Int64

  # The total sum in US dollars paid on the Increased Cost of Compliance (ICC) claims for the location. ICC coverage is one of several flood insurances resources for policyholders who need additional help rebuilding after a flood. It provides up to $30,000 to help cover the cost of mitigation measures that will reduce the flood risk.
  ICCPaid: Int64
}

type LocalityWind implements Excluding {
  # The community risk level from wind, 0 to 5.
  riskLevel: Int64

  # The greatest wind risk type. One of 'cyclone', 'tornado' and 'thunderstorm'.
  greatestWindRisk: WindType

  # The count of properties at risk
  atRisk(filter: LocalityWindAtRiskFilter): [LocalityWindAtRisk]
  probability: LocalityWindProbability

  # This locality has risk of thunderstorms
  hasThunderstormRisk: Boolean

  # This locality has risk of tornados
  hasTornadoRisk: Boolean

  # This locality has risk of cyclones
  hasCycloneRisk: Boolean

  # Risk Factor Wind Factor report link
  link: String!

  # The locality's wind historical events, as a connection. Sorted in reverse chronological order.
  historicConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Sort returned events based on requested value
    sort: WindHistoricSort

    # Filter returned historic events
    filter: WindHistoricFilter
  ): LocalityWindHistoricConnection

  # If locality is excluded, the reason for exclusion.
  exclusion: Exclusion
}

type LocalityWindAtRisk {
  level: FactorScale!
  propertyCount: Int64
}

input LocalityWindAtRiskFilter {
  level: [FactorScale]
}

# The locality's wind historical events, as a connection. Sorted in reverse chronological order.
type LocalityWindHistoricConnection {
  # Returns a list type that wraps edge type.
  edges: [LocalityWindHistoricEdge!]!

  # Pagination information in relation to current page.
  pageInfo: PageInfo!

  # Total number of records for the connection.
  #
  # Example: *15382*
  totalCount: Int64
}

# Represents one record for the current page.
type LocalityWindHistoricEdge {
  # Cursor is a string that can be used in subsequent request as value of a connection "after" argument, to request page starting after this item.
  #
  # Example: *Y3Vyc29yOjEyNTI0MA==*
  cursor: String

  # Contains one page record data.
  node: LocalityWindHistoricEvent!
}

union LocalityWindHistoricEvent = LocalityWindHistoricEventCyclone | LocalityWindHistoricEventTornado | LocalityWindHistoricEventThunderstorm

# Post-2004 cyclone information
type LocalityWindHistoricEventCyclone implements WindHistoricEvent {
  # Cyclone id
  eventId: Int64!

  # Event Type
  eventType: WindType!

  # Max sustained 1 min wind speeds in MpH
  windSpeed: Int64

  # Wind speed observed at the locality in MpH
  localWindSpeed: Int64

  # Cyclone name
  name: String

  # Landfall start  of the cyclone
  date: Date

  # Year of the event
  year: Int64

  # Wind category at landfall.
  categoryAtLandfall: WindCategory

  # Maximum category that the cyclone has reached.
  categoryMax: WindCategory

  # Category near county.
  categoryLocality: WindCategory

  # Number of properties affected by this cyclone.
  affectedProperties: Int64

  # True if this is an event with more data (post-2004). False if not
  hasDetails: Boolean

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

# Thunderstorm
type LocalityWindHistoricEventThunderstorm implements WindHistoricEvent {
  # Thunderstorm id
  eventId: Int64!

  # Event Type
  eventType: WindType!

  # Date of the event
  date: Date

  # Year of the event
  year: Int64

  # Estimated damages in US dollars.
  damages: Int64

  # Number of injuries caused by thunderstorm.
  injuries: Int64

  # Number of fatalities caused by thunderstorm.
  fatalities: Int64

  # Thunderstorm max wind speed
  maxWind: Int64
}

# Tornado
type LocalityWindHistoricEventTornado implements WindHistoricEvent {
  # Tornado id
  eventId: Int64!

  # Event Type
  eventType: WindType!

  # Date of the event
  date: Date

  # Year of the event
  year: Int64

  # Estimated damages in US dollars.
  damages: Int64

  # Number of injuries caused by tornado.
  injuries: Int64

  # Number of fatalities caused by tornado.
  fatalities: Int64

  # Tornado wind category
  category: TornadoCategory

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

type LocalityWindProbability {
  speed: [LocalityWindProbabilitySpeed!]
}

type LocalityWindProbabilitySpeed {
  # Socio-economic pathway of the prediction model.
  ssp: SSP!

  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year.
  relativeYear: Int64!

  # Return period of the wind event. One of: 2, 5, 20, 100, 300, 500, 700, 1700, 3000.
  returnPeriod: Int64!

  # The maximum 1-minute sustained speed for a given return period
  maxSpeed: Int64

  # The maximum 3-second gust speed for a given return period
  maxGust: Int64
}

# A `location` is a parcel that is represented in the First Street API. Each location has a unique `fsid` that is canonically attached to its parcel, based on its type.
#
# It is important to note that FSIDs may collide when referencing different location types.  For example, a `property` location may have an `FSID of 1` while a `state` location may also have an `FSID of 1`.
interface Location {
  fsid: Int64!
}

# Geographical metadata for a Location, represented in GeoJSON
#
# Warning: *Retrieving geometry is a resource-intensive operation and should be kept to a minimum.
type LocationGeometry {
  bbox: Bbox
  center: Center
  polygon: Polygon
}

input LocationSearchItem {
  fsid: Int64!
  type: LocationType!
}

type LocationSearchPreview implements Location {
  fsid: Int64!

  # PROPERTY = formattedAddress
  # CITY = City, State
  # COUNTY = County, State
  # STATE = State
  # ZCTA = ZCTA, State
  # TRACT = Tract, State
  # CD = "Congressional District #, State"
  # NEIGHBORHOOD = Neighborhood, State
  # COUSUB = Cousub, State
  name: String
  type: LocationType!
  floodFactor: Int64
  floodFactorLink: String!
  fireFactor: Int64
  fireFactorLink: String!
  heatFactor: Int64
  heatFactorLink: String!
  windFactor: Int64
  windFactorLink: String!
  overviewLink: String!
  isResidential: Boolean!
}

enum LocationType {
  PROPERTY
  CITY
  COUNTY
  STATE
  ZCTA
  TRACT
  CD
  NEIGHBORHOOD
  COUSUB
}

# Different types of supported lookups
enum LookupType {
  ADDRESS
  COORDINATE
  FSID
  LOCID
  APN
}

# Map legend
type MapLegend {
  colors: [MapLegendColor]
}

# Map legend - color
type MapLegendColor {
  # What the given color represents.
  represents: MapLegendColorRepresentation!

  # HEX value of the color
  color: String!
}

type MapLegendColorRepresentation {
  min: Float
  max: Float
  unit: String!
}

type MetadataItem {
  databaseId: String!
  name: String
}

type MetadataLookup {
  # Landuse type mappings to categories
  landUseCategory: [MetadataItem!]

  # Landuse type mappings to type
  landUseType: [MetadataItem!]

  # Building constuctions
  buildingConstruction: [MetadataItem!]

  # Building roofs
  buildingRoof: [MetadataItem!]

  # Infrastructure types
  infrastructureType: [MetadataItem!]

  # Infrastructure categories
  infrastructureCategory: [MetadataItem!]

  # Infrastructure type mappings to categories
  infrastructureTypeCategory: [MetadataItem!]

  # Fire proofing
  fireProofing: [MetadataItem!]

  # Fujita scale is a scale for rating tornado intensity based primarily on the damage tornadoes inflict on human-built structures and vegetation.
  fujitaScale: [TornadoCategory!]
}

enum MissileEnvironment {
  LOW
  HIGH
}

# Neighborhood data.
#
# Encompasses macro neighborhoods, neighborhood, sub-neighborhoods and residential districts (e.g. subdivisions and apartment complexes)
type Neighborhood implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: 68501
  fsid: Int64!

  # The neighborhood's city.
  city: [City]

  # The neighborhood's name. This encompasses macro neighborhoods, neighborhood, sub-neighborhoods and residential districts (e.g. subdivisions and apartment complexes).
  #
  # Example: *Union Hill-Novelty Hill*
  name: String

  # The neighborhood's subtype code. Macro neighborhoods = M, neighborhood = N, sub-neighborhoods = S and residential districts = R
  subtype: String

  # The neighborhood's county.
  county: [County]

  # The neighborhood's county subdivision.
  cousub: [CountySubdivision]

  # The neighborhood's state.
  state: State

  # A collection of nodes that represents geographical information for the neighborhood.
  geometry: LocationGeometry

  # Flood details for the neighborhood.
  flood: LocalityFlood

  # Fire details for the neighborhood.
  fire: LocalityFire

  # Heat details for the neighborhood.
  heat: LocalityHeat

  # Wind details for the neighborhood.
  wind: LocalityWind

  # fsfLink is First Street's link to the neighborhood on FirstStreet's website.
  #
  # Example: *https://floodfactor.com/neighborhood/68501_fsid?utm_medium=overlay*
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")

  # List of properties in the neighborhood, as a connection.
  propertyConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter the properties of this neighborhood.
    filter: PropertyFilters
  ): PageConnection
}

# Represents data over years
interface OverTime {
  # The year in which the represented data is categorized for
  year: Int64!

  # A relative representation of `year`
  relativeYear: Int64!
}

# Pagination information built based on [Relay](https://relay.dev/graphql/connections.htm) standard.
type PageConnection {
  # Returns a list type that wraps edge type.
  edges: [PageEdge!]!

  # Pagination information in relation to current page.
  pageInfo: PageInfo!

  # Total number of records for the connection.
  #
  # Example: *15382*
  totalCount: Int64
}

# Represents one record for the current page.
type PageEdge {
  # Cursor is a string that can be used in subsequent request as value of a connection "after" argument, to request page starting after this item.
  #
  # Example: *Y3Vyc29yOjEyNTI0MA==*
  cursor: String

  # Contains one page record data
  node: PagePreview!
}

# PageInfo is returned for a connection. It contains pagination-related info, as well as connection edges (page entries).
type PageInfo {
  # hasPreviousPage informs if there is a previous page
  hasPreviousPage: Boolean!

  # hasNextPage informs if there is a next page
  hasNextPage: Boolean!

  # startCursor refers to the cursor at start of the first page.
  #
  # Example: *Y3Vyc29yOjEwMDU=*
  startCursor: String

  # endCursor refers to the the last item of the last page.
  #
  # Example: *Y3Vyc29yOjEwMTI=*
  endCursor: String
}

# PagePreview contains the minimal amount of data to allow detailed lookups on as-needed basis.
type PagePreview {
  # FSID of the item.
  id: Int64!

  # Name of the item.
  name: String

  # Additional information about the item as available.
  descriptor: String
}

# The polygon GeoJSON (MultiPoint)
type Polygon {
  # GeoJSON geometry type MultiPoint.
  type: String

  # Coordinates of the MultiPoint
  #
  # Example: *[[[[-76.963417312,39.400443189],[-76.963460575,39.400683755],[-76.962656664,39.400823574],[-76.962570569,39.400561332],[-76.963417312,39.400443189]]]]*
  coordinates: [[[[Float!]]]]
}

# Property details.
#
# Based on the legal boundary of a property as recognized by a state or local government.
type Property implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: 392804911
  fsid: Int64!

  # The property's address fields.
  address: PropertyAddress

  # The property's alternative addresses.
  alternativeAddresses: [PropertyAddress]

  # The property's city.
  city: City

  # The property's state.
  state: State

  # The property's county.
  county: County

  # The property's congressional district including the FSID and name.
  cd: CongressionalDistrict

  # The property's ZIP code tabulation area (ZCTA) provided by the Census Bureau including the zcta FSID and name.
  zcta: Zcta

  # The property's census tract provided by the Census Bureau, including the tract FSID and name.
  tract: Tract

  # The neighborhood(s) the property is associated with as an array, including each associated neighborhood's name and FSID.
  # This encompasses macro neighborhoods, neighborhood, sub-neighborhoods and residential districts (e.g. subdivisions and apartment complexes).
  neighborhood: [Neighborhood]

  # The property's county subdivision, including the county subdivision FSID and name.
  cousub: CountySubdivision

  # The Federal Emergency Management Agency (FEMA) flood zone designation name. These zones are used by FEMA to designate the Special Flood Hazard Areas (SFHA) and for insurance rating purposes.
  #
  # Example: Zone A
  femaZone: String

  # A collection of nodes that represents geographical information for the property.
  geometry: LocationGeometry

  # Size of the parcel in acres.
  parcelAcres: Float

  # Indicates whether First Street has information about the largest building footprint on the property from which the property's flood risk stats are calculated.
  #
  # Example: 5
  footprint: Boolean

  # The height in centimeters associated with the floor elevation for the building.
  #
  # Example: 23
  floorElevation: Int64

  # Indicates if the property is used for residential purposes.
  #
  # Example: true
  isResidential: Boolean

  # The landuse code id of this property.
  landuseCodeId: Int64

  # Information about the building the property is located in, as applicable.
  building: Building

  # The Automated Valuation Model (AVM) provides the modeled real estate market value for the property as well as the providerId for the provider of the AVM model.
  AVM: PropertyAVM

  # fsfLink is First Street's link to the property on FirstStreet's website.
  #
  # Example: *https://floodfactor.com/property/240652458_fsid?utm_medium=overlay*
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")

  # Flood details for the property.
  flood: PropertyFlood

  # Fire details for the property.
  fire: PropertyFire

  # Heat details for the property.
  heat: PropertyHeat

  # Wind details for the property.
  wind: PropertyWind
}

# PropertyAVM is modeled real estate market value for the property as well as the providerId for the provider of the AVM model. Default provider is First Street Foundation (providerId: 2).
type PropertyAVM {
  # First Street AVM lower bound.
  low: Int64

  # First Street automated valuation model.
  mid: Int64

  # First Street AVM upper bound.
  high: Int64
}

type PropertyAddress {
  # The property's complete street address name.
  #
  # Example: *123 Main St Chicago 60106 IL*
  formattedAddress: String
}

type PropertyCooling {
  # Year asscociated with the point.
  year: Int64!

  # Relative year to this year. Can be negative
  relativeYear: Int64!

  # Dollar values in US Dollars, can be 0.
  cost: Int64

  # The amount of electricity used for the purpose of maintaining a comfortable indoor temperature, in kwH
  energy: Float

  # Electric costs per Kwh.
  costPerKwh: Float

  # The temperature from which coolingDays and coolingDegreeDays are calculated.
  coolingTemp: Float
}

# Filter a property's cooling costs.
input PropertyCoolingFilter {
  # Filter property cooling costs by relative years.  e.g. relativeYears=[0,30]
  relativeYear: [Int64!]
}

# Property filters related to flood factor
input PropertyFilterFloodFactor {
  floodFactorGE: Int64
  floodFactorLE: Int64
}

# Property filters related to flood risk
input PropertyFilterFloodRisk {
  atRisk: Boolean
}

# Filters the list of properties.
# Filters are mutually exclusive, please define one sub-node only.
input PropertyFilters {
  # Filter properties by Floodfactor value
  floodFactor: PropertyFilterFloodFactor

  # Filter properties by presence of flood risk
  floodRisk: PropertyFilterFloodRisk

  # Filter properties by whether they are protected by an adaptation
  floodAdaptation: PropertyFiltersFloodAdaptation
}

# Property filters related to flood adaptation
input PropertyFiltersFloodAdaptation {
  hasAdaptation: Boolean
}

type PropertyFire implements FireStatistics & Excluding {
  # The property's Fire Factor
  fireFactor: Int64

  # Text representation of the Fire Factor.
  factorScale: FactorScale

  # Risk Factor link to Fire Report for the property
  link: String!

  # Average wildfire risk that would be greater than X% of counties in the United States, according to the US Forest Service. Ranking is based on the property's county.
  usfsRelativeRisk: Float

  # The level of combustibility associated with open space around the main building on this property. Adding open, defensible space around a building reduces fire risk.
  defensibleSpace: CombustibilityRating

  # The sign of future burn probability minus current burn probability (-1 is decreasing, 0 is unchanging, 1 is increasing)
  riskDirection: Int64

  # The property's fire historical events, as a connection. Sorted in reverse chronological order and descending by distance.
  historicConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter fire historic events
    filter: FireHistoricEventFilter
  ): FireHistoricConnection

  # Probability data for the property
  probability: PropertyFireProbability

  # Details for property fire losses.
  consequences(input: PropertyFireConsequencesInput): PropertyFireConsequences!

  # Insurance quote from Hippo Insurance
  insuranceHippo(
    # Class to return. By default quotes for all insurance classes will be returned.
    classification: InsuranceClassification
  ): PropertyInsuranceHippo @deprecated(reason: "Insurance field is deprecated. Use InsuranceQuotes.")

  # Insurance quotes from providers
  insuranceQuotes(
    # Class to return. By default quotes for all insurance classes will be returned.
    classification: InsuranceClassification
  ): [PropertyInsurance]

  # If property is excluded, the reason for exclusion.
  exclusion: Exclusion
}

type PropertyFireConsequences {
  damage: PropertyFireConsequencesDamage
  burn: PropertyFireConsequencesBurn!
  rebuild: PropertyFireConsequencesRebuild!
  cumulative: [PropertyFireConsequencesCumulative!]
}

# Estimates assuming that a fire reaches this building
type PropertyFireConsequencesBurn {
  # Days to repair (or rebuild) a building given flame lengths of
  # 0 - 2 feet, 2-4 feet, 4-8 feet, 8 - 12 feet, 12-20 feet, 20 feet+
  daysToRepairBin: [Float!]
}

# Cumulative likelihood of complete destruction if wildfire occurs over timeframe (%)
type PropertyFireConsequencesCumulative {
  # Year associated with the point.
  year: Int64!

  # Year, as relative to the current year
  relativeYear: Int64!

  # The max height of the y axis when the data point is being represented on a graph (from 0-100, where 100 is the max value).
  yMax: Int

  # The data point.
  point: Float
}

type PropertyFireConsequencesDamage {
  conditional: [PropertyFireConsequencesDamageConditional!]
}

# Annual likelihood of wildfire risks
type PropertyFireConsequencesDamageConditional {
  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year
  relativeYear: Int64!

  # Percentage chance of destruction, assuming that a fire reaches this building (out of 1)
  flameLossConditional: Float

  # Time lost to repair or rebuild, assuming that a fire reaches this building (in days)
  flameTimeConditional: Float

  # Average annual loss due to wildfire flames (in dollars)
  flameLoss: Float

  # Probability of building destruction by wildfire flames
  flamePercent: Float

  # Average annual time loss to repairs/rebuilding due to flames (in days)
  flameTime: Float

  # Average annual loss due to wildfire embers (in dollars)
  emberLoss: Float

  # Probability of building destruction by wildfire embers (out of 1)
  emberPercent: Float

  # Average annual time loss to repairs/rebuilding due to embers (in days)
  emberTime: Float

  # Relative level of risk of wildfire embers falling on this property
  emberRiskRating: EmberRiskRating
}

input PropertyFireConsequencesInput {
  # The general land use code
  # Example: 1 (residential)
  landuseCodeId: Int

  # The presence of defensible space around this property.
  defensibleSpace: Boolean

  # The type of roofing material.
  roofCoverId: String

  # The predominant construction material of the building
  constructionId: String

  # Number of stories for the Property
  stories: Int

  # Floor size in square feet
  buildingSqft: Int

  # Whether or not the property abides by the Fireproofing building code
  # True => has fire-proofing
  fireCode: Boolean

  # Replacement cost of the building in dollars.
  pricePerSqft: Int64
}

# Replacement cost to rebuild this property
type PropertyFireConsequencesRebuild {
  # Replacement cost to rebuild this property
  cost: Int64

  # Not Implemented. Replacement time to rebuild this property.
  days: Int64
}

# The information associated with the event(s) for event(s) where the area of the model simulation of the historic event overlaps any area of the location.
# This includes event ID (unique First Street ID assigned to all modeled historic events), type, name and fire impact to the location.
type PropertyFireHistoric implements FireHistoricEvent {
  # An id assigned to this property - historic event relationship.
  id: Int64!

  # A unique First Street identifier assigned to each modeled historic event.
  eventId: Int64!

  # The name of the modeled historic event if it exists.
  name: String!

  # Categorization of event type (wildfire, prescribed fire, wildland fire use, unknown, out of area responses, or complex).
  type: String!

  # The year when the event occured.
  year: Int64!

  # The month when the event occured.
  month: Int64!

  # Area of the historic event's polygon in square kilometers.
  area: Int64!

  # The total count of parcels that had the building footprint within the mapped area of the historic event's geometry.
  eventAffectedProperties: Int64!

  # The total count of parcels that were closer than 32187 meters from the building footprint to the historic event's geometry.
  eventNearbyProperties: Int64!

  # The distance from the parcel centroid to the burn perimeter in meters.
  distance: Int64

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

# Fire probability details for property.
type PropertyFireProbability {
  burn: [PropertyFireProbabilityBurn]
  cumulative: [PropertyFireProbabilityCumulative]
  damage: PropertyFireProbabilityDamage
}

# Fire probability details for property
type PropertyFireProbabilityBurn {
  year: Int64!

  # Year relative to 2020.
  relativeYear: Int64!

  # The percent chance of burn for the given year
  percent: Float

  # Max height of flame length
  flameMax: Float!

  # Mean height of flame length
  flameMean: Float!

  # Distribution of expected flame heights, represented in feet
  # 0 - 2 feet, 2-4 feet, 4-8 feet, 8 - 12 feet, 12-20 feet, 20 feet+
  flameBin: [Float!]

  # A boolean flag that determines if the property is in an area that would experience embers from a nearby wildfire
  emberZone: Boolean!
}

# The wildfire risk likelihood (% probability) to the building footprint by cumulative year.
type PropertyFireProbabilityCumulative {
  # Year asscociated with the point.
  year: Int64!

  # Year increments in relation to this year.
  relativeYear: Int64!

  # The max height of the y axis when the data point is being represented on a graph (from 0-100, where 100 is the max value).
  yMax: Int

  # The data point.
  point: Float
}

# Fire damage probability.
type PropertyFireProbabilityDamage {
  conditional: [PropertyFireProbabilityDamageConditional]
}

# The likelihood a structure ignites if it is within a fire. This field is beta and is subject to change.
type PropertyFireProbabilityDamageConditional {
  year: Int64!
  relativeYear: Int64!

  # Chance of structural destruction assuming a wildfire reaches this property (out of 1)
  flameLossConditional: Float

  # Downtime at this building, assuming that wildfire flames reach this property
  flameTimeConditional: Float

  # Annualized chance this structure is destroyed by wildfire flames
  flameLoss: Float

  # Annualized downtime due to wildfire flames
  flameTime: Float

  # Annualized chance this structure is destroyed by wildfire embers (out of 1)
  emberLoss: Float

  # Annualized downtime due to wildfire embers
  emberTime: Float
}

# Flood details for property.
type PropertyFlood implements FloodStatistic & Excluding {
  # The property's Flood Factor, a numeric integer from 1-10 (where 1 = minimal and 10 = extreme) based on flooding risk to the building footprint.
  # Flood risk is defined as a combination of cumulative risk over 30 years and flood depth.
  # Flood depth is calculated at the lowest elevation of the building footprint (largest if more than 1 exists, or property centroid where footprint does not exist).
  floodFactor: Int64

  # Text representation of the Flood Factor.
  factorScale: FactorScale

  # Risk Factor link to Flood Report for the property
  link: String!

  # The location's risk direction represented in a numeric value based on the change in risk for the location from 2020 to 2050 for the climate model realization of the RCP 4.5 mid emissions scenario.
  #
  # -1 = decreasing
  # 0 = stationary
  # 1 = increasing
  riskDirection: Int64

  # Denotes what environmental risks impact the location represented in a numeric value.
  #
  # 1 = precipitation
  # 2 = precipitation and sea level rise
  # 3 = precipitation, sea level rise and hurricane storm surge
  #
  # Coastal areas on the East Coast and Hawaii will return 3, other coastal areas will return 2 and all other locations will return 1.
  environmentalRisk: Int64

  # The predominant form of flooding for the property: inland fluvial, inland pluvial, coastal, or none.
  #
  # For inland areas, flooding depths are provided as the maximum of pluvial and fluvial models. In coastal areas, a coupled model merges the three flooding sources into a single coastal data set.
  #
  # Example: inland pluvial
  floodType: String

  # Flood probabilty details for property.
  probability: PropertyFloodProbability

  # The list of modeled historic events that inundated the location.
  # Inundation is defined as having flood depth >0 for property queries or >1 property with >0 flood depth for higher-level locations.
  # Flood depth is calculated at the lowest elevation of the building footprint (largest if more than 1 exists, or property centroid where footprint does not exist).
  historic: [PropertyFloodHistoric]

  # The Average Annual Loss (AAL) API provides the US dollar value loss due to modeled flood risk for the location in 2020 and 2050 for residential properties.
  # Property level queries can also append their own AVM, depth or building detail parameters to the query to receive the loss for those specific parameters.
  #
  # When an input parameter is not provided, we will use best-available value for the property for the calculations.
  AAL(
    # The Automated Valuation Model (AVM) or the modeled real estate market value in US dollars for the property. Minimum: 1000.
    #
    # Example: *23564*
    AVM: Int64

    # The depth in cm of the flood event that the damage should be calculated for. Multiple values accepted, delineated with a comma.
    # Maximum number of depths: 35, each depth is a whole number (non-negative integer) under 1000.
    #
    # Example: *30, 45*
    # Default: *5,15,30*
    depths: [Int64!]

    # Whether or not the building contains a basement.
    hasBasement: Boolean

    # The height in centimeters associated with the floor elevation for the building. Additional information can be acquired by quering the Location-FloodElevation product.
    # Has to be a whole number (non-negative integer) under 1000.
    #
    # Example: *22*
    floorElevation: Int64

    # The total number of units the building contains.
    #
    # Example: *2*
    units: Int64

    # The total number of stories the building contains.
    #
    # Example: *3*
    stories: Int64
  ): PropertyFloodAAL @deprecated(reason: "'AAL' is deprecated, use 'consequences' instead")

  # Details for property flood losses.
  consequences(input: PropertyFloodConsequencesInput): PropertyFloodConsequences

  # Provides information from community-wide grey and green adaptation projects across the United States categorized into 40 different Adaptation Types.
  # Returns data as a connection.
  #
  # **Features**
  #
  # - Identify all large-scale adaptation projects that serve an area
  # - Understand how many properties served by a particular adaptation structure or project
  # - Recognize to what extent, an area is protected or what level of event a project can withstand
  # - Access information for large-scale adaptation projects across the country
  adaptationConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # Details about flood environmental details, such as precipitation, sea level and tide stations.
  environmental: LocalityFloodEnvironmental

  # Provides insurance quotes from insurance providers. TODO: need more precise definition.
  insurance: [PropertyFloodInsurance] @deprecated(reason: "Insurance field is deprecated. Use InsuranceQuotes.")

  # Insurance quote from Hippo Insurance. (This is being redirected to Neptune Flood.)
  insuranceHippo(
    # Class to return. By default quotes for all insurance classes will be returned.
    classification: InsuranceClassification
  ): PropertyInsuranceHippo @deprecated(reason: "InsuranceHippo field is deprecated. Use InsuranceQuotes.")

  # Insurance quotes from providers
  insuranceQuotes(
    # Class to return. By default quotes for all insurance classes will be returned.
    classification: InsuranceClassification
  ): [PropertyInsurance]

  # Requirements for flood insurance
  insuranceRequirement: FloodInsuranceRequirement!

  # If property is excluded, the reason for exclusion.
  exclusion: Exclusion
}

# Details for property flood losses.
#
# The low, mid, high are based on 3 potential climate model realizations of the RCP 4.5 emissions scenario.
#
# Losses are determined by using the USACE depth damage functions for Riverine and Surge flooding. Damage due to precipitation flooding is given by a conservative depth damage function developed by First Street Foundation.
type PropertyFloodAAL {
  # Provides the loss in US dollars due to flood risk for the property by depth.
  # The dollar loss is returned with the associated depth. 3cm, 15cm, or 31cm are returned automatically if no specific depth is appended to the query.
  # Losses are determined by using the USACE depth damage functions for Riverine and Surge flooding and a conservative depth damage function of Precipitation flooding developed by First Street Foundation.
  depthLoss: [PropertyFloodDepthLoss!]

  # For residential properties, it provides the annual loss in US dollars due to flood risk for the property by in 5 year increments from 2020 to 2050.
  # The low, mid, high loss is returned within the associated year.
  # Property level queries can also append their own AVM, depth or building detail parameters to the query to receive the loss for those specific parameters.
  annualLoss: [PropertyFloodAnnualLoss!]
}

# Property flood AAL details.
type PropertyFloodAnnualLoss implements OverTime {
  # The year (2020, 2025, 2030, 2035, 2040, 2045, or 2050) the dollar loss was calculated for.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The loss in US dollars due to modeled flooding for the location for the associated year based on the low scenario of the RCP 4.5 emissions curve.
  low: Int64

  # The loss in US dollars due to modeled flooding for the location for the associated year based on the mid scenario of the RCP 4.5 emissions curve.
  mid: Int64

  # The loss in US dollars due to modeled flooding for the location for the associated year based on the high scenario of the RCP 4.5 emissions curve.
  high: Int64
}

# Details for property flood losses.
type PropertyFloodConsequences {
  byDepth: [PropertyFloodConsequencesByDepth]
  byProbability: [PropertyFloodConsequencesByProbability]
  annualized: [PropertyFloodConsequencesAnnualized!]
}

# Expected losses over time
type PropertyFloodConsequencesAnnualized implements OverTime {
  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year
  relativeYear: Int64!

  # Percentile value for estimates, one of: 10, 50, 90. 10th percentile estimate is low value, 90th percentile is high value, and 50th is mean.
  percentile: Int

  # Estimated damages in US dollars
  damages: Int64

  # Estimated loss of property use in days
  days: Int64
}

# Expected losses for specified depth.
type PropertyFloodConsequencesByDepth {
  # Depth values for calculating consequences. By default one of: 5, 15, 30. Can be adjusted through PropertyFloodConsequencesInput parameter.
  depth: Int64!

  # Percentile value for estimates, one of: 10, 50, 90. 10th percentile estimate is low value, 90th percentile is high value, and 50th is mean.
  percentile: Int!

  # Provides the loss in US dollars due to flood risk for the property by depth.
  damages: Int64

  # Provides the loss in days due to flood risk for the property by depth.
  days: Int64
}

# Annual depths and damages by return period
type PropertyFloodConsequencesByProbability {
  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year
  relativeYear: Int64!

  # Return period of flooding
  returnPeriod: Int64!

  # Percentile value for estimates, one of: 10, 50, 90. 10th percentile estimate is low value, 90th percentile is high value, and 50th is mean.
  percentile: Int!

  # Estimated depth of flooding
  depth: Int64

  # Estimated damages in US dollars
  damages: Int64

  # Estimated loss of property use in days
  days: Int64
}

input PropertyFloodConsequencesInput {
  # The general land use code
  # Example: 1 (residential)
  landuseCodeId: Int

  # The predominant construction material of the building
  constructionId: String

  # Number of stories for the Property
  stories: Int

  # Floor size in square feet
  buildingSqft: Int

  # Whether or not the property has a basement.
  basement: Boolean

  # Number of units in Property
  units: Int

  # The height in centimeters associated with the floor elevation for the building.
  foundationHeight: Int

  # The depth in cm of the flood event that the damage should be calculated for. Multiple values accepted, delineated with a comma.
  # Maximum number of depths: 35, each depth is a whole number (non-negative integer) under 1000.
  #
  # Example: *30, 45*
  # Default: *5,15,30*
  depths: [Int64!]
}

type PropertyFloodDepthLoss {
  # The depth in centimeters that the dollar loss was calculated for.
  depth: Int64!

  # The loss in US dollars due to modeled flooding for the location for the associated depth.
  # Losses are determined by using the USACE depth damage functions for riverine and surge flooding.
  # Damage due to precipitation flooding is given by a conservative depth damage function developed by First Street Foundation.
  loss: Int64
}

# The information associated with the event(s) for event(s) where the area of the model simulation of the historic event overlaps any area of the location.
# This includes event ID (unique First Street ID assigned to all modeled historic events), type, name and flood impact to the location.
# Impact includes the depth of flooding (in centimeters) to the building footprint for property searches.
type PropertyFloodHistoric implements FloodHistoricEvent {
  # A unique First Street identifier assigned to each modeled historic event.
  eventId: Int64!

  # The name of the modeled historic event if it exists (note: several were strong pluvial events).
  name: String!

  # Categorization of event type (hurricane, fluvial, nor'easter, or tropical storm).
  type: String!

  # The year when the event occured.
  year: Int64!

  # The month when the event occured.
  month: Int64!

  # The estimated recurrence interval of the event, or the inverse of the annual likelihood. For example a 1 in 500 annual likelihood event.
  returnPeriod: Int64

  # The total count of parcels that had any flooding (>0) to the building footprint that are within the mapped area of the historic event's geometry.
  affectedProperties: Int64!

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry

  # The depth of flooding (in centimeters) to the building footprint for property searches.
  # Flood depth is calculated at the lowest elevation of the building footprint (largest if more than 1 exists, or property centroid where footprint does not exist).
  depth: Int64
}

# TODO: need more details here
# Insurance provider information for property
type PropertyFloodInsurance {
  # Insurance price quote, in cents.
  price: Int64

  # The total sum in US dollars of insurance coverage on buildings.
  homeCoverage: Int64

  # The total sum in US dollars of insurance coverage on contents of buildings.
  contentsCoverage: Int64

  # Insurance provider details.
  provider: InsuranceProvider!

  # Date when the quote expires.
  expires: Date

  # Insurance provider disclaimer(s).
  disclaimer: [String]

  # URL to the insurance provider's website for insurance purchase.
  purchaseLink: String!
}

# Flood probability details for property.
type PropertyFloodProbability {
  # Delivers the flood depth (in centimeters) for flooding to the building footprint broken down by return period and year of annual risk.
  #
  # The low, mid, high likelihood is returned within the associated threshold and year. Available depth thresholds include >0cm, >15cm, and >30cm, and are broken down by the following years within the model - 2020, 2025, 2030, 2035, 2040, 2045, and 2050.
  depth(filter: PropertyFloodProbabilityFilter): [PropertyFloodProbabilityDepth]

  # Delivers the risk likelihood (% probability) for flooding to the building footprint broken down by depth threshold and year of annual risk.
  chance(
    filter: PropertyFloodProbabilityFilter

    # Optional depth values for calculating chance. One of: 5, 15, 30.
    depths: [Int64!]
  ): [PropertyFloodProbabilityChance]

  # Delivers the risk likelihood (% probability) for flooding to the building footprint broken down by depth threshold and cumulative year.
  cumulative(
    filter: PropertyFloodProbabilityFilter

    # Optional depth values for calculating cumulative flooding. One of: 5, 15, 30.
    depths: [Int64!]
  ): [PropertyFloodProbabilityCumulative]
}

# The risk likelihood (% probability) for flooding to the building footprint broken down by depth threshold and year of annual risk.
type PropertyFloodProbabilityChance implements OverTime {
  # The year (2020, 2025, 2030, 2035, 2040, 2045, or 2050) the probability was calculated for.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The depth threshold in centimeters (5cm, 15cm, or 30cm) that the probability was calculated for.
  threshold: Int64!

  # The likelihood (% probability) of flooding given as a value from 0-1 (rounded to two decimal places) at the specified depth based on the low scenario of the RCP 4.5 emissions curve.
  low: Float

  # The likelihood (% probability) of flooding given as a value from 0-1 (rounded to two decimal places) at the specified depth based on the mid scenario of the RCP 4.5 emissions curve.
  mid: Float

  # The likelihood (% probability) of flooding given as a value from 0-1 (rounded to two decimal places) at the specified depth based on the high scenario of the RCP 4.5 emissions curve.
  high: Float

  # The max height of the y axis when the low point is being represented on a graph (from 0-100, where 100 is the max value).
  yMaxLow: Int!

  # The max height of the y axis when the mid point is being represented on a graph (from 0-100, where 100 is the max value).
  yMaxMid: Int!

  # The max height of the y axis when the high point is being represented on a graph (from 0-100, where 100 is the max value).
  yMaxHigh: Int!
}

# The risk likelihood (% probability) for flooding to the building footprint broken down by depth threshold and cumulative year.
type PropertyFloodProbabilityCumulative implements OverTime {
  # The year (2020, 2025, 2030, 2035, 2040, 2045, or 2050) the probability was calculated for.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The depth threshold in centimeters (5cm, 15cm, or 30cm) that the probability was calculated for.
  threshold: Int64!

  # The likelihood (% probability) of flooding given as a value from 0-1 (rounded to two decimal places) at the specified depth based on the low scenario of the RCP 4.5 emissions curve.
  low: Float

  # The likelihood (% probability) of flooding given as a value from 0-1 (rounded to two decimal places) at the specified depth based on the mid scenario of the RCP 4.5 emissions curve.
  mid: Float

  # The likelihood (% probability) of flooding given as a value from 0-1 (rounded to two decimal places) at the specified depth based on the high scenario of the RCP 4.5 emissions curve.
  high: Float

  # The max height of the y axis when the low point is being represented on a graph (from 0-100, where 100 is the max value).
  yMaxLow: Int!

  # The max height of the y axis when the mid point is being represented on a graph (from 0-100, where 100 is the max value).
  yMaxMid: Int!

  # The max height of the y axis when the high point is being represented on a graph (from 0-100, where 100 is the max value).
  yMaxHigh: Int!
}

# The flood depth (in centimeters) for flooding to the building footprint broken down by return period and year of annual risk.
type PropertyFloodProbabilityDepth implements OverTime {
  # The year (2020, 2025, 2030, 2035, 2040, 2045, or 2050) the depth was calculated for.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The return period (500, 250, 100, 50, 20, 10, 5, or 2 years) that the depth was calculated for.
  returnPeriod: Int64!

  # The depth in centimeters for the specified return period based on the low scenario of the RCP 4.5 emissions curve.
  low: Int64

  # The depth in centimeters for the specified return period based on the mid scenario of the RCP 4.5 emissions curve.
  mid: Int64

  # The depth in centimeters for the specified return period based on the high scenario of the RCP 4.5 emissions curve.
  high: Int64
}

# Filter probability flood data by provided value(s).
# Will choose Threshold or ReturnPeriod filter as applicable.
input PropertyFloodProbabilityFilter {
  year: [Int64]
  relativeYear: [Int64]
  threshold: [Int64]
  returnPeriod: [Int64]
}

# Heat details for property.
type PropertyHeat implements Excluding {
  # The property's Heat Factor
  heatFactor: Int64

  # Text representation of the Heat Factor.
  factorScale: FactorScale

  # Risk Factor link to Heat Report for the property
  link: String!

  # 98th Percentile temperature for the property (Fahrenheit)
  hotTemperature: Int64

  # Local difference in temperature for this property compared to surroundings.
  anomalyTemperature: Float

  # Costs and energy used for cooling this property.
  cooling(filter: PropertyCoolingFilter): [PropertyCooling]

  # Average High Temperature in the hottest month in Fahrenheit.
  temperatureAverageHigh(filter: PropertyHeatTemperatureHighFilter): [PropertyHeatTemperatureHigh]

  # Distribution of days by temperature.
  days: PropertyHeatDays

  # Distribution of heat waves by temperature.
  heatWaves: PropertyHeatWaves
  consequences(input: PropertyHeatConsequencesInput): PropertyHeatConsequences

  # If property is excluded, the reason for exclusion.
  exclusion: Exclusion
}

type PropertyHeatConsequences {
  # Costs and energy used for cooling this property.
  costs: [PropertyHeatConsequencesCosts]

  # Distribution of days by temperature.
  days: PropertyHeatConsequencesDays
}

type PropertyHeatConsequencesCosts {
  year: Int64!
  relativeYear: Int64!

  # Average cooling degree days
  averageCoolingDegreeDays: Int64

  # The average cooling degree days Y height in a chart.
  averageCoolingDegreeDaysYMax: Float

  # Annual costs associated with cooling
  annualCoolingCosts: Int64

  # The annual cooling costs Y height in a chart.
  annualCoolingCostsYMax: Float

  # Estimated A/C Energy consumption
  estimatedEnergyConsumption: Int64

  # The estimated A/C Energy consumption Y height in a chart.
  estimatedEnergyConsumptionYMax: Float

  # Estimated A/C Emissions (in lbs CO2)
  estimatedEmissions: Int64
}

type PropertyHeatConsequencesDays {
  # Days of temperature at or above the cooling temperature, customized by desired indoor temperature in Fahrenheit.
  coolingDays: [PropertyHeatDay]
}

input PropertyHeatConsequencesInput {
  buildingSqft: Int
  yearBuilt: Int
  landuseCodeId: Int
  coolingTemp: Int
  costPerKwh: Float
}

type PropertyHeatDay {
  # Year asscociated with the point.
  year: Int64!

  # Relative year to this year. Can be negative
  relativeYear: Int64!

  # Lower bound of temperature bin. The unit is either Fahrenheit or percentile depending on the parent object.
  binLower: Int64

  # Upper bound of temperature bin. The unit is either Fahrenheit or percentile depending on the parent object.
  binUpper: Int64

  # Days within bin
  days: Int64

  # The Y height in a chart.
  yMax: Float
}

# Filter a property's temperature-day distributions.
input PropertyHeatDayFilter {
  # Filter distributions by relative years.  e.g. relativeYears=[0,30]
  relativeYear: [Int64!]
}

type PropertyHeatDays {
  # Distribution of days in a year by temperature in Fahrenheit.
  distribution(filter: PropertyHeatDayFilter): [PropertyHeatDay]

  # Days of temperature at or above the local definition of a hot day in percentile.
  hotDays: [PropertyHeatDay]

  # Days of temperature at or above the cooling temperature in Fahrenheit.
  coolingDays: [PropertyHeatDay]

  # Days of temperature at or above the health caution temperature in Fahrenheit.
  healthCautionDays: [PropertyHeatDay]

  # Days of temperature at or above the dangerous temperature in Fahrenheit.
  dangerousDays: [PropertyHeatDay]

  # The additional number of days at or above the hot day temperature relative to the surrounding area.
  anomalyDays: [PropertyHeatDay]
}

type PropertyHeatTemperatureHigh {
  # Year asscociated with the point.
  year: Int64!

  # Relative year to this year. Can be negative
  relativeYear: Int64!

  # Maximum Monthly Temperature
  # Average daily max temperature (Fahrenheit) in the hottest month (usually July)
  mmt: Float
}

# Filter to narrow the values by relative year.
input PropertyHeatTemperatureHighFilter {
  relativeYear: [Int64!]
}

type PropertyHeatWave {
  # Year asscociated with the point.
  year: Int64!

  # Relative year to this year. Can be negative.
  relativeYear: Int64!

  # Temperature threshold of the heat wave. The unit is either Fahrenheit or percentile depending on the parent object.
  threshold: Int64!

  # The probability of 3 days in a row to exceed threshold temperature.
  probability: Float

  # For given probability, how long heat wave will last.
  length: Int64
}

# Filter to narrow the values by year, relative year, or threshold.
input PropertyHeatWaveFilter {
  relativeYear: [Int64!]
}

type PropertyHeatWaves {
  # Distribution of heat waves in a year by temperature in Fahrenheit.
  distribution(filter: PropertyHeatWaveFilter): [PropertyHeatWave]

  # Heat waves of temperature above the local definition of a hot temperature in percentile.
  hotHeatWave: [PropertyHeatWave]
}

type PropertyInsurance {
  provider: InsuranceProvider!
  rates: [InsuranceRate]
  disclaimer: String
}

type PropertyInsuranceHippo {
  provider: InsuranceProvider!
  rates: [InsuranceHippoRate]
  disclaimer: String
}

# The National Flood Insurance Program (NFIP) premiums are the cost of flood insurance for coverage of the building and the contents in the building based on the current NFIP insurance rate tables. There are two hypothetical insurance premiums for coverage of the structure and contents at $250k/$125k and $125k/$50k.
type PropertyNFIP {
  # Estimated premium for a policy in US dollars.
  estimate: Int64!

  # The dollar amount of building coverage for estimate in US dollars.
  building: Int64!

  # The dollar amount of contents coverage for estimate in US dollars.
  contents: Int64!
}

# Wind details for property.
type PropertyWind implements WindStatistics & Excluding {
  # The property's Wind Factor
  windFactor: Int64

  # Text representation of the Wind Factor.
  factorScale: FactorScale

  # Risk Factor link to Wind Report for the property
  link: String!

  # The sign of future wind probability minus current wind probability (-1 is decreasing, 0 is unchanging, 1 is increasing)
  riskDirection: Int64

  # This property has risk of thunderstorms
  hasThunderstormRisk: Boolean

  # This property has risk of tornados
  hasTornadoRisk: Boolean

  # This property has risk of cyclones
  hasCycloneRisk: Boolean

  # The greatest wind risk type. One of 'cyclone', 'tornado' and 'thunderstorm'.
  greatestWindRisk: WindType

  # The level of risk from flying objects in this building's surrounding area. (Low/High)
  missileEnvironment: MissileEnvironment

  # The prevailing wind direction for storms in the area
  primaryWindDirection: CompassDirection

  # Forecast probability
  probability: PropertyWindProbability

  # The property's wind historical events, as a connection. Sorted in reverse chronological order.
  historicConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Sort returned events based on requested value
    sort: WindHistoricSort

    # Filter returned historic events
    filter: WindHistoricFilter
  ): PropertyWindHistoricConnection

  # Details for property wind losses.
  consequences(input: PropertyWindConsequencesInput): PropertyWindConsequences

  # If property is excluded, the reason for exclusion.
  exclusion: Exclusion
}

type PropertyWindConsequences {
  byProbability: [PropertyWindConsequencesByProbability!]
  annualized: [PropertyWindConsequencesAnnualized!]
  byWindGust: [PropertyWindConsequencesByWindGust!]
  tornado: [PropertyWindConsequencesTornado!]
}

# The annualized cost of damages expected to the building.
type PropertyWindConsequencesAnnualized {
  # Socio-economic pathway of the prediction model.
  ssp: SSP!

  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year.
  relativeYear: Int64!

  # Percentile value for estimates, one of: 10, 50, 90. 10th percentile estimate is low value, 90th percentile is high value, and 50th is mean.
  percentile: Int!

  # Estimated damages in US dollars.
  damages: Int64

  # Estimated loss of property use in days.
  days: Int64
}

# The cost of damage expected to the building and the number of days that it would be expected to repair wind damage, based on predicted probability
type PropertyWindConsequencesByProbability {
  # Socio-economic pathway of the prediction model.
  ssp: SSP!

  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year.
  relativeYear: Int64!

  # Return period of the wind event. One of: 2, 5, 20, 100, 300, 500, 700, 1700, 3000.
  returnPeriod: Int64!

  # Percentile value for estimates, one of: 10, 50, 90. 10th percentile estimate is low value, 90th percentile is high value, and 50th is mean.
  percentile: Int!

  # Provides the loss in US dollars due to wind risk for the property by return period.
  damages: Int64

  # Provides the loss in days due to wind risk for the property by return period.
  days: Int64
}

# The cost of damage expected to the building and the number of days that it would be expected to repair wind damage, based on predicted wind gust speed
type PropertyWindConsequencesByWindGust {
  # Percentile value for estimates, one of: 10, 50, 90. 10th percentile estimate is low value, 90th percentile is high value, and 50th is mean.
  percentile: Int!

  # Wind gust speed in MpH
  gustSpeed: Int!

  # Provides the loss in US dollars due to wind risk for the property by specific wind gust speed
  damages: Int64!

  # Provides the loss in days due to wind risk for the property by wind gust
  days: Int64!
}

input PropertyWindConsequencesInput {
  # The general land use code
  # Example: 1 (residential)
  landuseCodeId: Int

  # Number of stories for the property
  stories: Int

  # The type of roofing material.
  roofCoverId: String

  # The design standard to which the building is built, displayed as text (low, middle, high)
  designStandard: BuildingWindDesignStandard

  # The direction of the largest face of the building. Format as direction (N, NE, E, SE, S, SW, W, NW)
  buildingOrientation: CompassDirection

  # Year when the property has been built
  yearBuilt: Int

  # Number of units in Property
  units: Int

  # Floor size in square feet
  buildingSqft: Int
}

# The cost of damages to the building in case it's hit by a tornado
type PropertyWindConsequencesTornado {
  # Tornado wind category
  category: TornadoCategory!

  # Percentile value for estimates, one of: 10, 50, 90. 10th percentile estimate is low value, 90th percentile is high value, and 50th is mean.
  percentile: Int!

  # Low estimate of damages to the building for the wind category
  damagesLow: Int64!

  # High estimate of damages to the building for the wind category
  damagesHigh: Int64!

  # Low estimate of loss of property use in days for the wind category
  daysLow: Int64!

  # High estimate of loss of property use in days for the wind category
  daysHigh: Int64!
}

# The property's wind historical events, as a connection. Sorted in reverse chronological order.
type PropertyWindHistoricConnection {
  # Returns a list type that wraps edge type.
  edges: [PropertyWindHistoricEdge!]!

  # Pagination information in relation to current page.
  pageInfo: PageInfo!

  # Total number of records for the connection.
  #
  # Example: *15382*
  totalCount: Int64
}

# Represents one record for the current page.
type PropertyWindHistoricEdge {
  # Cursor is a string that can be used in subsequent request as value of a connection "after" argument, to request page starting after this item.
  #
  # Example: *Y3Vyc29yOjEyNTI0MA==*
  cursor: String

  # Contains one page record data.
  node: PropertyWindHistoricEvent!
}

union PropertyWindHistoricEvent = PropertyWindHistoricEventCyclone | PropertyWindHistoricEventTornado | PropertyWindHistoricEventThunderstorm

# Post-2004 cyclone information
type PropertyWindHistoricEventCyclone implements WindHistoricEvent {
  # Cyclone id
  eventId: Int64!

  # Event Type
  eventType: WindType!

  # Max sustained 1 min wind speeds in MpH
  windSpeed: Int64

  # Wind speed observed at the property in MpH
  localWindSpeed: Int64

  # Cyclone name
  name: String

  # Landfall start  of the cyclone
  date: Date

  # Year of landfall start  of the cyclone
  year: Int64

  # Wind category at landfall.
  categoryAtLandfall: WindCategory

  # Maximum category that the cyclone has reached.
  categoryMax: WindCategory

  # Category near county.
  categoryLocality: WindCategory

  # Number of properties in the property's county affected by this cyclone.
  affectedProperties: Int64

  # True if this is an event with more data (post-2004). False if not
  hasDetails: Boolean

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

# Thunderstorm
type PropertyWindHistoricEventThunderstorm implements WindHistoricEvent {
  # Thunderstorm id
  eventId: Int64!

  # Event Type
  eventType: WindType!

  # Date of the event
  date: Date

  # Year of the event
  year: Int64

  # Estimated damages in US dollars.
  damages: Int64

  # Number of injuries caused by thunderstorm.
  injuries: Int64

  # Number of fatalities caused by thunderstorm.
  fatalities: Int64

  # Thunderstorm max wind speed
  maxWind: Int64
}

# Tornado
type PropertyWindHistoricEventTornado implements WindHistoricEvent {
  # Tornado id
  eventId: Int64!

  # Event Type
  eventType: WindType!

  # Date of the event
  date: Date

  # Year of the event
  year: Int64

  # Estimated damages in US dollars.
  damages: Int64

  # Number of injuries caused by tornado.
  injuries: Int64

  # Number of fatalities caused by tornado.
  fatalities: Int64

  # Tornado wind category
  category: TornadoCategory

  # A collection of nodes that represents geographical information for the historic event.
  geometry: LocationGeometry
}

# Forecast probability
type PropertyWindProbability {
  # Probability for wind speeds
  speed(filter: PropertyWindProbabilityFilter): [PropertyWindProbabilitySpeed!]

  # Probability for wind directions
  direction: [PropertyWindProbabilityDirection!]

  # Probability for wind speeds by speed thresholds
  chance(filter: PropertyWindProbabilityFilter): [PropertyWindProbabilityChance!]

  # Cumulative probability for wind speeds over time
  cumulative(input: PropertyWindProbabilityInput, filter: PropertyWindProbabilityFilter): [PropertyWindProbabilityCumulative!]
}

# Probability for wind speeds by speed thresholds
type PropertyWindProbabilityChance implements OverTime {
  # Socio-economic pathway of the prediction model.
  ssp: SSP!

  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year.
  relativeYear: Int64!
  threshold: Int64!

  # Chance of the wind speeds reaching the threshold. Speed chances range from 0.0003 to 0.50 (0.03% to 50%)
  probability: Float!

  # Wind category based on the speed of threshold gust.
  category: WindCategory
}

# Cumulative probability for wind speeds over time
type PropertyWindProbabilityCumulative implements OverTime {
  # Socio-economic pathway of the prediction model.
  ssp: SSP!

  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year.
  relativeYear: Int64!
  threshold: Int64!

  # Chance of the wind speeds reaching the threshold. Speed chances range from 0.0003 to 0.50 (0.03% to 50%)
  probability: Float

  # The max height of the y axis when the point is being represented on a graph (from 0-100, where 100 is the max value).
  yMax: Int

  # Wind category based on the speed threshold.
  category: WindCategory
}

# Probability for wind directions
type PropertyWindProbabilityDirection {
  # Socio-economic pathway of the prediction model.
  ssp: SSP!
  direction: CompassDirection!

  # The percentage of winds coming from a given direction
  percent: Float!
}

# Filter probability wind data by provided value(s).
# Will choose Threshold or ReturnPeriod filter as applicable.
# For a record to be included it needs to satisfy all provided filter conditions ("AND")
input PropertyWindProbabilityFilter {
  year: [Int64]
  relativeYear: [Int64]
  threshold: [Int64]
  returnPeriod: [Int64]
}

input PropertyWindProbabilityInput {
  thresholds: [Int64!]
}

# Probability for wind speeds
type PropertyWindProbabilitySpeed implements OverTime {
  # Socio-economic pathway of the prediction model.
  ssp: SSP!

  # Year associated with this data point.
  year: Int64!

  # Year, as relative to the current year.
  relativeYear: Int64!

  # Return period of the wind event. One of: 2, 5, 20, 100, 300, 500, 700, 1700, 3000.
  returnPeriod: Int64!

  # The maximum 1-minute sustained speed for a given return period
  maxSpeed: Int64

  # The maximum 3-second gust speed for a given return period
  maxGust: Int64

  # Wind category based on maxGust.
  category: WindCategory
}

# Top-level queries
type Query {
  # Property lookup by FSID.
  property(fsid: Int64!): Property

  # Property lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  propertyByCoordinate(lat: Float!, lng: Float!): Property

  # Property lookup by address. An address can be a `city name`, `home address`, or `business address`. `City` and `State` need to be included within the `address` query.
  #
  # Optionally include the lat and lng parameters for `home address` or `business address` to improve match accuracy.
  #
  # *Address lookups should be used as seldom as possible. This is the slowest form of a lookup since the address must be reverse geocoded prior to a query in our database.*
  propertyByAddress(address: String!, lat: Float, lng: Float): Property

  # Property lookup by APN.
  propertyByAPN(APN: String!, FIPS: String!): Property

  # Property lookup by Lightbox location_id.
  propertyByLocationId(locationId: String!): Property @deprecated(reason: "propertyByLocationId is deprecated. Other options include search by FSID, APN, address, and coordinates.")

  # City lookup by FSID.
  city(fsid: Int64!): City

  # City lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  cityByCoordinate(lat: Float!, lng: Float!): City

  # Neighborhood lookup by FSID.
  neighborhood(fsid: Int64!): Neighborhood

  # Neighborhood lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  neighborhoodByCoordinate(lat: Float!, lng: Float!): Neighborhood

  # Congressional District lookup by FSID.
  cd(fsid: Int64!): CongressionalDistrict

  # Congressional District lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  cdByCoordinate(lat: Float!, lng: Float!): CongressionalDistrict

  # County lookup by FSID.
  county(fsid: Int64!): County

  # County lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  countyByCoordinate(lat: Float!, lng: Float!): County

  # County Subdivision lookup by FSID.
  cousub(fsid: Int64!): CountySubdivision

  # County lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  cousubByCoordinate(lat: Float!, lng: Float!): CountySubdivision

  # State lookup by FSID.
  state(fsid: Int64!): State

  # State lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  stateByCoordinate(lat: Float!, lng: Float!): State

  # Tract lookup by FSID.
  tract(fsid: Int64!): Tract

  # Tract lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  tractByCoordinate(lat: Float!, lng: Float!): Tract

  # Zip code lookup by FSID.
  zcta(fsid: Int64!): Zcta

  # Zip code lookup by coordinate. This lookup will check the coordinates to see if that point intersects within a boundary of a parcel from the database.
  zctaByCoordinate(lat: Float!, lng: Float!): Zcta

  # Query to obtain flood-related data.
  flood: FloodQuery

  # Query to obtain fire-related data.
  fire: FireQuery

  # Query to obtain heat-related data.
  heat: HeatQuery
  ping: String!

  # Current API version
  version: VersionRelease!

  # Query to provide address/metadata information by given an FSID
  locationSearch(filter: [LocationSearchItem!]): [LocationSearchPreview!]!

  # Returns an array of the database values
  metadataLookup: MetadataLookup!

  # Health check point 
  healthcheck: Boolean!
}

type RankInState {
  counties(by: RankInStateLocalityStat!, size: Int64): [County]
}

enum RankInStateLocalityStat {
  HOTDAYS_DESC
  HOTDAYS_ASC
  DANGEROUSDAYS_DESC
  DANGEROUSDAYS_ASC
}

# Data resource currently supported
enum Resource {
  FLOOD
}

enum SSP {
  SSP_2_45
  SSP_3_70
}

# The annual observed mean sea level (in centimeters using the NAVD88 datum) from 1980-2019 for the tide station.
type SeaLevelRiseHistoric {
  # The year of reading (1980-2019).
  year: Int64!

  # Annual observed mean sea level in centimeters using the NAVD88 datum
  value: Int64!
}

# The projections for 2020-2050 (in 10 year increments) with the low, mid and high mean sea level (in centimeters using the NAVD88 datum) based on 3 potential climate model realizations of the RCP 4.5 emissions scenario.
type SeaLevelRiseProjection implements OverTime {
  # The year (2020, 2030, 2040, or 2050) of the projection.
  year: Int64!

  # The year relative to 2020.
  relativeYear: Int64!

  # The annual mean sea level projection in centimeters (in the NAVD88 datum) based on the low scenario of the RCP 4.5 emissions curve.
  low: Float!

  # The annual mean sea level projection in centimeters (in the NAVD88 datum) based on the mid scenario of the RCP 4.5 emissions curve.
  mid: Float!

  # The annual mean sea level projection in centimeters (in the NAVD88 datum) based on the high scenario of the RCP 4.5 emissions curve.
  high: Float!
}

enum Service {
  LOCATION
  GEOMETRY
  BUILDING
  FEMA
  FLOOD
  FIRE
  HEAT
  WIND
  EXTERNALAVM
  FLOODCONSEQUENCES
  FIRECONSEQUENCES
  HEATCONSEQUENCES
  WINDCONSEQUENCES
}

# US state or federal district
type State implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: *12*
  fsid: Int64!

  # The name of the state.
  #
  # Example: *Florida*
  name: String

  # State abbreviation.
  #
  # Example: *FL*
  shortName: String

  # The Federal Information Processing Standards code for the state.
  #
  # Example: *12*
  FIPS: Int64!

  # A collection of nodes that represents geographical information for the state.
  geometry: LocationGeometry

  # The state's cities, as a connection.
  cityConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # The state's neighborhoods, as a connection.
  neighborhoodConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # The state's counties, as a connection.
  countyConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # The state's congressional districts.
  cd: [CongressionalDistrict]

  # The state's county subdivisions, as a connection.
  cousubConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # The state's ZCTAs, as a connection.
  zctaConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String
  ): PageConnection

  # The state's properties, as a connection.
  propertyConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter the properties of this state.
    filter: PropertyFilters
  ): PageConnection

  # Flood data for the state.
  flood: LocalityFlood

  # Fire details for the state.
  fire: LocalityFire

  # Heat details for the state.
  heat: LocalityHeat

  # Wind details for the state.
  wind: LocalityWind

  # Rank child localities in state by certain attributes.
  rankLocalities: RankInState

  # fsfLink is First Street's link to the state on FirstStreet's website.
  #
  # Example: *https://floodfactor.com/state/12_fsid?utm_medium=overlay*
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")
}

# A TideStation provides metadata as well as the annual observed mean sea level rise (1980-2020), and sea level rise projection by 10 year increments (2020-2050).
type TideStation {
  # A unique First Street identifier assigned to each tide station.
  id: Int64!

  # The National Oceanic and Atmospheric Association (NOAA) ID associated with the tide station
  NOAAId: Int64!

  # The National Oceanic and Atmospheric Association (NOAA) name associated with the tide station.
  name: String

  # Provides the lat/lng location of the tide station.
  center: Center

  # The annual observed mean sea level (in centimeters using the NAVD88 datum) from 1980-2019 for the tide station.
  seaLevelRiseHistoric: [SeaLevelRiseHistoric]

  # The projections for 2020-2050 (in 10 year increments) with the low, mid and high mean sea level (in centimeters using the NAVD88 datum) based on 3 potential climate model realizations of the RCP 4.5 emissions scenario.
  seaLevelRiseProjection: [SeaLevelRiseProjection]
}

scalar Time

# Fujita scale tornado category details
type TornadoCategory {
  # Tornado category id. A value from 0 to 11
  tornadoCategoryId: Int64!

  # Fujita rating of the category. A value from 0 to 5
  rating: Int64!

  # Indicates if the category is on the enhanced Fujita scale.
  isEnhanced: Boolean

  # Readable category name. Example: F1, EF2, etc
  name: String!

  # Min wind speed
  minWindSpeed: Int64!

  # Max wind speed. Null means no upper limit
  maxWindSpeed: Int64

  # Readable description of the tornado strength. Example: weak, strong, violent.
  description: String!
}

# Census Tract as provided by the by the US Census Bureau (not available on FirstStreet's website)
type Tract implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: *39119912800*
  fsid: Int64!

  # The Federal Information Processing Standards code which uniquely identified counties and county equivalents, and certain freely associated states.
  #
  # Example: *39119912800*
  FIPS: Int64

  # The tract's congressional district.
  cd: CongressionalDistrict

  # The tract's city.
  city: City

  # The tract's county subdivision.
  cousub: CountySubdivision

  # The tract's county.
  county: County

  # The tract's state.
  state: State

  # A collection of nodes that represents geographical information for the tract.
  geometry: LocationGeometry

  # Flood data for the tract.
  flood: LocalityFlood

  # Fire details for the tract.
  fire: LocalityFire

  # Heat details for the tract.
  heat: LocalityHeat

  # Wind details for the tract.
  wind: LocalityWind

  # fsfLink is always null for tracts, as they are not displayed on FirstStreet's website.
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")

  # List of properties within the tract, as a connection.
  propertyConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter the properties of this tract.
    filter: PropertyFilters
  ): PageConnection
}

type VersionRelease {
  # The current release version
  release: String

  # The date of the release
  date: Time
}

type WindCategory {
  # Wind category id. A value from 0 to 5, corresponding to TS to Cat 5.
  windCategoryId: Int64!

  # Readable category name for cyclone category.
  name: String!

  # Min wind speed.
  minWindSpeed: Int64!

  # Max wind speed. Null means no upper limit.
  maxWindSpeed: Int64
}

interface WindHistoricEvent {
  # Wind Historic Event id
  eventId: Int64!
  eventType: WindType!
  date: Date
  year: Int64
}

# Filters returned historic events. 
input WindHistoricFilter {
  # When false will return all known events: cyclones pre- and post-2004, tornados, and thunderstorms (aka severe wind events.)
  # When true will return only events for which we have maps: post-2004 cyclones and tornados.
  # Default is false.
  mappedEventsOnly: Boolean!
}

enum WindHistoricSort {
  DATE_DESC
  DATE_ASC
  SPEED_DESC
  SPEED_ASC
  PROPERTIES_AFFECTED_DESC
  PROPERTIES_AFFECTED_ASC
}

# Query to obtain wind-related data.
type WindQuery {
  # Current wind model version
  version: VersionRelease!
}

interface WindStatistics {
  # The sign of future wind probability minus current wind probability (-1 is decreasing, 0 is unchanging, 1 is increasing)
  riskDirection: Int64
}

enum WindType {
  CYCLONE
  TORNADO
  THUNDERSTORM
}

# ZIP code tabulation area as provided by the US Census Bureau.
type Zcta implements Location {
  # First Street ID (FSID) is a unique identifier assigned to each location.
  #
  # Example: *82633*
  fsid: Int64!

  # The zcta name.
  #
  # Example: *82633*
  name: String

  # The city or cities the zcta is associated with.
  city: [City]

  # The county or counties the zcta is associated with.
  county: [County]

  # The county subdivision or subdivisions the zcta is associated with.
  cousub: [CountySubdivision]

  # The state the zcta is associated with.
  state: State

  # A collection of nodes that represents geographical information for the zcta.
  geometry: LocationGeometry

  # Flood data for the zcta.
  flood: LocalityFlood

  # Fire details for the zcta.
  fire: LocalityFire

  # Heat details for the zcta.
  heat: LocalityHeat

  # Wind details for the zcta.
  wind: LocalityWind

  # fsfLink is First Street's link to the zcta on FirstStreet's website.
  #
  # Example: *https://floodfactor.com/zcta/82633_fsid?utm_medium=overlay*
  fsfLink: String @deprecated(reason: "fsfLink is deprecated, use the child `link` field within the climate peril.")

  # List of properties in the zcta, as a connection.
  propertyConnection(
    # Number of records(edges) to return. A number between 0 and 100.
    first: Int

    # Cursor value of a record(edge) past which records should be returned. Cursor can be obtained from an earlier call. Cursor is a string between 10 and 32 characters long.
    after: String

    # Filter the properties of this zip code.
    filter: PropertyFilters
  ): PageConnection
}
